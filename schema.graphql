schema {
  query: Query
  mutation: Mutation
}

"""An account record is used to represent a customer or trialist"""
type Account {
  """The type of account"""
  accountType: AccountType
  """Type of account"""
  accountTypeId: ID!
  """Address validated status"""
  addressValidated: Boolean!
  """Annual revenue"""
  annualRevenue: Int
  """ARR (Annual Recurring Revenue) amount"""
  arr: Float
  """
  Pcode (a reference code for location data from Avalara) for Avalara AFC
  """
  avalaraAfcPcode: String
  balances: [AccountBalance!]!
  """City for billing"""
  billingCity: String
  """Contact for billing correspondence"""
  billingContact: Contact
  """Contact for billing correspondence"""
  billingContactId: ID
  """Country for billing"""
  billingCountry: String
  """Day of the month to process billing"""
  billingDay: Int
  """State for billing"""
  billingState: String
  """Street address for billing"""
  billingStreet: String
  """Zip/PostalCode for billing"""
  billingZip: String
  """Custom unique identifier for the account"""
  code: String
  """List of contacts for the account"""
  contacts: [Contact!]
  """Datetime the account was created"""
  createdAt: ISO8601DateTime!
  """Primary currency for billing"""
  currency: Currency
  """Primary currency for billing"""
  currencyId: ID
  """Default values for a new deal"""
  dealDefaults: Deal
  """List of deals for the account"""
  deals: [Deal!]
  """Description of the account"""
  description: String
  """Send new invoices to draft state"""
  draftInvoices: Boolean!
  """Dun & Bradstreet Number"""
  duns: String
  """Enable sending emails to account contacts"""
  emailsEnabled: Boolean!
  """Number of employees"""
  employees: Int
  """The entity this account belongs to"""
  entity: Entity
  """The ID of the entity this account belongs to"""
  entityId: ID
  """Tax entity use code"""
  entityUseCode: String
  """Primary fax number for the account"""
  fax: String
  """Group that the account belongs to"""
  groupId: ID
  """Unique identifier for the account"""
  id: ID!
  """The industry the account belongs to"""
  industry: Industry
  """Industry the account belongs to"""
  industryId: ID
  """Invoice template to be used for invoice generation"""
  invoiceTemplate: InvoiceTemplate
  """Invoice template to be used for invoice generation"""
  invoiceTemplateId: ID
  """Invoices for the account"""
  invoices(filter: String, sort: String): [Invoice!]
  """Link to the account's LinkedIn profile"""
  linkedinUrl: String
  """MRR (Monthly Recurring Revenue) amount"""
  mrr: Float
  """MUR (Monthly Usage Revenue) amount"""
  mur: Float
  """Name of the account"""
  name: String
  """Payment terms in days"""
  netPaymentDays: Int
  """Account owner"""
  owner: User
  """Account owner"""
  ownerUserId: ID
  """Paying status"""
  payingStatus: PayingStatus
  """Payment methods associated with this account"""
  paymentMethods: [PaymentMethod!]
  """Primary phone number for the account"""
  phone: String
  """Recurring revenues for the account"""
  recurringRevenues(filter: String, sort: String): [RecurringRevenue!]
  revenueMovements: [RevenueMovement!]
  """Secondary billing contact IDs"""
  secondaryBillingContactIds: [ID!]
  """Secondary billing contact IDs"""
  secondaryBillingContacts: [Contact!]
  """City for shipping"""
  shippingCity: String
  """Country for shipping"""
  shippingCountry: String
  """State for shipping"""
  shippingState: String
  """Street address for shipping"""
  shippingStreet: String
  """Zip/PostalCode for shipping"""
  shippingZip: String
  """List of subscriptions"""
  subscriptions(filter: String, sort: String): [Subscription!]
  """Tax number"""
  taxNumber: String
  """The tax number supplied has been validated with an official source"""
  taxNumberValidated: Boolean
  """Time zone for the account"""
  timezone: String
  transactions: [Transaction!]
  """Datetime the account was last updated"""
  updatedAt: ISO8601DateTime!
  """Website of the account"""
  website: String
}

"""Attributes for creating and updating an account"""
input AccountAttributes {
  """The type of account"""
  accountTypeId: ID
  """Annual revenue"""
  annualRevenue: Int
  """
  Pcode (a reference code for location data from Avalara) for Avalara AFC
  """
  avalaraAfcPcode: String
  """City for billing"""
  billingCity: String
  """Contact for billing correspondence"""
  billingContact: ContactAttributes
  """Contact id for billing correspondence"""
  billingContactId: ID
  """Country for billing"""
  billingCountry: String
  """State for billing"""
  billingState: String
  """Street address for billing"""
  billingStreet: String
  """Zip/PostalCode for billing"""
  billingZip: String
  """Custom unique identifier for the account"""
  code: String
  """Primary currency for billing"""
  currencyId: ID
  """Description of the account"""
  description: String
  """Send new invoices to draft state"""
  draftInvoices: Boolean
  """Dun & Bradstreet Number"""
  duns: String
  """Enable sending emails to account contacts"""
  emailsEnabled: Boolean
  """Number of employees"""
  employees: Int
  """The entity this account belongs to"""
  entityId: ID
  """Tax entity use code"""
  entityUseCode: String
  """Primary fax number for the account"""
  fax: String
  """Group that the account belongs to"""
  groupId: ID
  """Industry the account belongs to"""
  industryId: ID
  """Invoice template to be used for invoice generation"""
  invoiceTemplateId: ID
  """Remote IP address of the lead"""
  ipAddress: String
  """Link to the account's LinkedIn profile"""
  linkedinUrl: String
  """Name of the account"""
  name: String
  """Payment terms in days"""
  netPaymentDays: Int
  """Account owner"""
  ownerUserId: ID
  """Primary phone number for the account"""
  phone: String
  """Secondary billing contact IDs"""
  secondaryBillingContactIds: [ID!]
  """City for shipping"""
  shippingCity: String
  """Country for shipping"""
  shippingCountry: String
  """State for shipping"""
  shippingState: String
  """Street address for shipping"""
  shippingStreet: String
  """Zip/PostalCode for shipping"""
  shippingZip: String
  """Tax number"""
  taxNumber: String
  """Time zone"""
  timezone: String
  """Website of the account"""
  website: String
}

"""
An account balance represents the money debited or credited in a given currency
"""
type AccountBalance {
  """Account the balance is associated with"""
  accountId: ID!
  """The amount credited or debited"""
  balance: Float!
  """Currency of the amount"""
  currencyId: String!
  """Unique identifier for the account balance"""
  id: ID!
}

"""The connection type for AccountBalance."""
type AccountBalanceConnection {
  """A list of edges."""
  edges: [AccountBalanceEdge]
  """A list of nodes."""
  nodes: [AccountBalance]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type AccountBalanceEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: AccountBalance
}

"""The connection type for Account."""
type AccountConnection {
  """A list of edges."""
  edges: [AccountEdge]
  """A list of nodes."""
  nodes: [Account]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of AccountCreate."""
type AccountCreatePayload {
  account: Account
  errors: [String!]
}

"""Autogenerated return type of AccountDelete."""
type AccountDeletePayload {
  account: Account
  errors: [String!]
}

"""An edge in a connection."""
type AccountEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Account
}

"""Autogenerated return type of AccountReset."""
type AccountResetPayload {
  errors: String
}

"""Autogenerated return type of AccountSignup."""
type AccountSignupPayload {
  errors: [String!]
  quote: Quote
}

"""The type of account"""
type AccountType {
  """Code for the account type"""
  code: String
  """Datetime the account type was created"""
  createdAt: ISO8601DateTime!
  """ID of the account type"""
  id: ID!
  """Label for the account type"""
  name: String!
  """Datetime the account type was last updated"""
  updatedAt: ISO8601DateTime!
}

"""The connection type for AccountType."""
type AccountTypeConnection {
  """A list of edges."""
  edges: [AccountTypeEdge]
  """A list of nodes."""
  nodes: [AccountType]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type AccountTypeEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: AccountType
}

"""Autogenerated return type of AccountUpdate."""
type AccountUpdatePayload {
  account: Account
  errors: [String!]
}

"""Autogenerated return type of AccountValidateAddress."""
type AccountValidateAddressPayload {
  account: Account
}

type AccountingTable {
  rows: [AccountingTableRow!]!
}

type AccountingTableCell {
  alignment: String
  content: String
  span: Int
  style: String
  width: Int
}

type AccountingTableRow {
  cells: [AccountingTableCell!]!
  style: String
}

"""Autogenerated return type of ApiAccessTokenCreate."""
type ApiAccessTokenCreatePayload {
  accessToken: String
  errors: [String!]
}

type ApiClient {
  """Number of seconds that access tokens will be issued for"""
  accessTokenExpiresIn: Int
  """Lets authorization code grant be used to generate access tokens"""
  authorizationCodeEnabled: Boolean!
  """Lets client credentials grant be used to generate access tokens"""
  clientCredentialsEnabled: Boolean!
  """The client_id to use when making authorization requests"""
  clientId: String
  """Only returned on creation of an api client"""
  clientSecret: String
  """Unique identifier of the api client"""
  id: ID!
  """Name of the api client"""
  name: String
  """The ID of the user that created the application"""
  ownerId: ID
  """Required for authorization_code grant. The callback url of the client."""
  redirectUri: String
  """The scopes that this application can request"""
  scopes: [String!]
}

"""Attributes for creating and updating an api client"""
input ApiClientAttributes {
  """Number of seconds that access tokens will be issued for"""
  accessTokenExpiresIn: Int
  """Lets authorization code grant be used to generate access tokens"""
  authorizationCodeEnabled: Boolean
  """Lets client credentials grant be used to generate access tokens"""
  clientCredentialsEnabled: Boolean
  """Name of the api client"""
  name: String
  """Required for authorization_code grant. The callback url of the client."""
  redirectUri: String
  """The scopes that this application can request"""
  scopes: [String!]
}

"""The connection type for ApiClient."""
type ApiClientConnection {
  """A list of edges."""
  edges: [ApiClientEdge]
  """A list of nodes."""
  nodes: [ApiClient]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of ApiClientCreate."""
type ApiClientCreatePayload {
  apiClient: ApiClient
  errors: [String!]
}

"""Autogenerated return type of ApiClientDelete."""
type ApiClientDeletePayload {
  apiClient: ApiClient
  errors: String
}

"""An edge in a connection."""
type ApiClientEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: ApiClient
}

"""Autogenerated return type of ApiClientSecretRenew."""
type ApiClientSecretRenewPayload {
  clientId: String
  clientSecret: String
  errors: [String!]
}

"""Autogenerated return type of ApiClientUpdate."""
type ApiClientUpdatePayload {
  apiClient: ApiClient
  errors: [String!]
}

type ApprovalDecision {
  """Approval request"""
  approvalRequest: ApprovalRequest!
  """ID of approval request"""
  approvalRequestId: ID!
  """Approver associated with this decision"""
  approver: Approver!
  """ID of approver"""
  approverId: ID!
  """Unique ID"""
  id: ID
  """Additional notes to this decision"""
  notes: String
  state: ApprovalRequestState!
}

type ApprovalRequest {
  """List of decisions from approvers reviewing this quote"""
  approvalDecisions: [ApprovalDecision!]!
  """List of approvers to review this quote"""
  approvers: [Approver!]!
  """Unique ID"""
  id: ID
  """Requested quote for approval"""
  quote: Quote!
  """ID of requested quote for approval"""
  quoteId: ID!
  state: ApprovalRequestState!
  """Total amount of users approving this quote"""
  totalApprovals: Int!
  """Total amount of approvers for this quote"""
  totalApprovers: Int!
  """Total amount of users rejecting this quote"""
  totalRejections: Int!
  """List of triggered approval rules for this quote"""
  triggeredApprovalRules: [ApprovalRule!]!
}

enum ApprovalRequestState {
  """Approved"""
  APPROVED
  """Pending"""
  PENDING
  """Rejected"""
  REJECTED
}

type ApprovalRule {
  """Rule will be applied when active"""
  active: Boolean
  anyDiscount: Int
  anyDiscountEnabled: Boolean
  """Approver for this rule"""
  approver: Approver
  """ID of approver for this rule"""
  approverId: ID
  billingPeriod: BillingPeriod
  billingPeriodEnabled: Boolean
  """First date the rule will apply"""
  fromDate: ISO8601Date
  """Unique ID"""
  id: ID
  isRampEnabled: Boolean
  """Rule name"""
  name: String
  overallQuoteDiscount: Int
  overallQuoteDiscountEnabled: Boolean
  plan: Plan
  planId: ID
  planIdEnabled: Boolean
  product: Product
  productId: ID
  productIdEnabled: Boolean
  """Last date the rule will apply"""
  toDate: ISO8601Date
  totalQuoteAmount: Int
  totalQuoteAmountEnabled: Boolean
}

"""Attributes for creating and updating an approval rule"""
input ApprovalRuleAttributes {
  """Rule will be applied when active"""
  active: Boolean
  anyDiscount: Int
  anyDiscountEnabled: Boolean
  """ID of approver for this rule"""
  approverId: ID
  billingPeriod: BillingPeriod
  billingPeriodEnabled: Boolean
  """First date the rule will apply"""
  fromDate: ISO8601Date
  isRampEnabled: Boolean
  """Name of the approval rule"""
  name: String
  overallQuoteDiscount: Int
  overallQuoteDiscountEnabled: Boolean
  planId: ID
  planIdEnabled: Boolean
  productId: ID
  productIdEnabled: Boolean
  """Late date the rule will apply"""
  toDate: ISO8601Date
  totalQuoteAmount: Int
  totalQuoteAmountEnabled: Boolean
}

"""The connection type for ApprovalRule."""
type ApprovalRuleConnection {
  """A list of edges."""
  edges: [ApprovalRuleEdge]
  """A list of nodes."""
  nodes: [ApprovalRule]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of ApprovalRuleCreate."""
type ApprovalRuleCreatePayload {
  approvalRule: ApprovalRule
  errors: [String!]
}

"""Autogenerated return type of ApprovalRuleDelete."""
type ApprovalRuleDeletePayload {
  approvalRule: ApprovalRule
  errors: String
}

"""An edge in a connection."""
type ApprovalRuleEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: ApprovalRule
}

"""Autogenerated return type of ApprovalRuleUpdate."""
type ApprovalRuleUpdatePayload {
  approvalRule: ApprovalRule
  errors: [String!]
}

type Approver {
  approvalRules: [ApprovalRule!]
  id: ID
  name: String
  user: User
  userId: ID
}

"""Attributes for creating and updating an approver"""
input ApproverAttributes {
  """Name of the approver"""
  name: String
  """Single-user approver"""
  userId: ID
}

"""The connection type for Approver."""
type ApproverConnection {
  """A list of edges."""
  edges: [ApproverEdge]
  """A list of nodes."""
  nodes: [Approver]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of ApproverCreate."""
type ApproverCreatePayload {
  approver: Approver
  errors: [String!]
}

"""Autogenerated return type of ApproverDelete."""
type ApproverDeletePayload {
  approver: Approver
  errors: String
}

"""An edge in a connection."""
type ApproverEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Approver
}

"""Autogenerated return type of ApproverUpdate."""
type ApproverUpdatePayload {
  approver: Approver
  errors: [String!]
}

type Attachment {
  id: String!
  name: String!
}

"""
The Authorized Object represents the entity for which the authorization was granted
"""
union AuthObject = Invoice | Quote

type BatchMutation {
  mutation: BatchMutationName!
  result: JSON!
}

input BatchMutationAttributes {
  attributes: JSON
  body: String
  mutation: BatchMutationName!
}

enum BatchMutationName {
  QUOTE_CHANGE_ADD
  QUOTE_CHANGE_DELETE
  QUOTE_CHANGE_UPDATE
  SUBSCRIPTION_CANCEL
}

"""
Big decimal of up to 12 digits and 21 decimals, transported as a string
"""
scalar BigDecimal

type BillRun {
  accountsProcessed: Int
  amountInvoiced: Float
  billingDate: ISO8601Date!
  currencyId: ID!
  endedAt: ISO8601DateTime
  entity: Entity
  entityId: ID
  id: ID!
  invoiceSeqEnd: Int
  invoiceSeqStart: Int
  invoicesGenerated: Int
  lastAccountId: ID
  startedAt: ISO8601DateTime!
  state: String
}

"""The connection type for BillRun."""
type BillRunConnection {
  """A list of edges."""
  edges: [BillRunEdge]
  """A list of nodes."""
  nodes: [BillRun]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type BillRunEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: BillRun
}

type BillingCycle {
  endDate: ISO8601Date!
  startDate: ISO8601Date!
}

"""Billing details for an account"""
type BillingDetails {
  """City for billing"""
  billingCity: String
  """Billing contact"""
  billingContact: Contact
  """Country for billing"""
  billingCountry: String
  """State for billing"""
  billingState: String
  """Street address for billing"""
  billingStreet: String
  """Zip/PostalCode for billing"""
  billingZip: String
  """Currency"""
  currency: Currency
  """Name of the account"""
  name: String
  """Tax number"""
  taxNumber: String
}

"""Attributes for creating and updating billing details"""
input BillingDetailsAttributes {
  """City for billing"""
  billingCity: String
  """Email of the billing contact"""
  billingContactEmail: String
  """Country for billing"""
  billingCountry: String
  """State for billing"""
  billingState: String
  """Street address for billing"""
  billingStreet: String
  """Zip/PostalCode for billing"""
  billingZip: String
  """Name of the account"""
  name: String
  """Tax number"""
  taxNumber: String
}

"""Autogenerated return type of BillingDetailsUpdate."""
type BillingDetailsUpdatePayload {
  billingDetails: BillingDetails
  errors: [String!]
}

enum BillingPeriod {
  """Billed Annual"""
  ANNUAL
  """Billed Monthly"""
  MONTHLY
  """Billed Once"""
  ONCE
  """Billed Quarterly"""
  QUARTERLY
  """Billed Semi_annual"""
  SEMI_ANNUAL
}

type BillingPeriodAmount {
  """Total amount to pay for the period duration"""
  amount: Float
  """ID"""
  id: ID!
  """Proration percentage"""
  prorationRate: Float
}

"""Campaigns are used to track where contacts and leads originate from"""
type Campaign {
  """Human-readable, unique reference"""
  code: String
  """Number of contacts in this campaign"""
  contactCount: Int!
  """End date of campaign"""
  endDate: ISO8601Date
  """Unique identifier for the campaign"""
  id: ID!
  """Number of leads in this campaign"""
  leadCount: Int!
  """Campaign name"""
  name: String
  """Campaign owner"""
  owner: User
  """ID of the user owning this campaign"""
  ownerUserId: ID
  """Start date of campaign"""
  startDate: ISO8601Date
}

input CampaignAttributes {
  code: String
  endDate: ISO8601Date!
  name: String
  """Account owner"""
  ownerUserId: ID
  startDate: ISO8601Date!
}

"""The connection type for Campaign."""
type CampaignConnection {
  """A list of edges."""
  edges: [CampaignEdge]
  """A list of nodes."""
  nodes: [Campaign]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of CampaignCreate."""
type CampaignCreatePayload {
  campaign: Campaign
  errors: [String!]
}

"""Autogenerated return type of CampaignDelete."""
type CampaignDeletePayload {
  campaign: Campaign
  errors: String
}

"""An edge in a connection."""
type CampaignEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Campaign
}

"""Autogenerated return type of CampaignUpdate."""
type CampaignUpdatePayload {
  campaign: Campaign
  errors: [String!]
}

union Charge = QuoteCharge | SubscriptionCharge

enum ChargeType {
  """One_time charge"""
  ONE_TIME
  """Recurring charge"""
  RECURRING
  """Usage charge"""
  USAGE
}

"""Autogenerated return type of Checkout."""
type CheckoutPayload {
  invoice: Invoice
  payment: Payment
  paymentApplication: PaymentApplication
  transaction: Transaction
}

input CheckoutPaymentMethodAttributes {
  metadata: JSON
  pluginGuid: ID!
  savePaymentMethod: Boolean
  token: String!
}

type Company {
  """Datetime that the company was created"""
  createdAt: ISO8601DateTime!
  """Default role to assign to new users"""
  defaultRoleId: ID
  inactivityTimeout: Int
  """Whether the company is in migration mode"""
  migrationMode: Boolean!
  """Name of the company"""
  name: String
  """Whether outbound email is enabled"""
  outboundEmailsEnabled: Boolean!
  """Identity Provider Issuer"""
  samlIssuer: String
  """X.509 Certificate"""
  samlSignatureCertificate: String
  """Identity Provider Single Sign-On URL"""
  samlSsoUrl: String
  ssoEnabled: Boolean!
  ssoGoogleEnabled: Boolean!
  ssoMode: SsoMode!
  """Datetime that the company was last updated"""
  updatedAt: ISO8601DateTime!
  """Whitelisted origin for API requests"""
  whitelistedOrigin: String!
}

"""Attributes the company that owns this Bunny account"""
input CompanyAttributes {
  """Base currency for the company"""
  baseCurrencyId: String
  """Default role to assign to new users"""
  defaultRoleId: ID
  inactivityTimeout: Int
  """Whether the company is in migration mode"""
  migrationMode: Boolean
  name: String
  """Whether outbound email is enabled"""
  outboundEmailsEnabled: Boolean
  """Identity Provider Issuer"""
  samlIssuer: String
  """X.509 Certificate"""
  samlSignatureCertificate: String
  """Identity Provider Single Sign-On URL"""
  samlSsoUrl: String
  ssoEnabled: Boolean
  ssoGoogleEnabled: Boolean
  ssoMode: SsoMode
  """Whitelisted origin for API requests"""
  whitelistedOrigin: String
}

"""Autogenerated return type of CompanyUpdate."""
type CompanyUpdatePayload {
  company: Company
  errors: String
}

"""The contact record for a person on an account"""
type Contact {
  """The account the contact belongs to"""
  account: Account
  """The account the contact belongs to"""
  accountId: ID
  """The campaigns the contact is a member of"""
  campaigns: [Campaign!]!
  """Custom unique identifier for the contact"""
  code: String
  """Datetime the contact was created"""
  createdAt: ISO8601DateTime!
  """A description of the contact"""
  description: String
  """Email address of the contact"""
  email: String
  """The entity the contact belongs to"""
  entityId: ID
  """First name of the contact"""
  firstName: String!
  """Full name of the contact"""
  fullName: String!
  """Unique ID for the contact"""
  id: ID!
  """Last name of the contact"""
  lastName: String
  """Link to the contact's LinkedIn profile"""
  linkedinUrl: String
  """City for the contact"""
  mailingCity: String
  """Country of the contact"""
  mailingCountry: String
  """State for the contact"""
  mailingState: String
  """Street address for the contact"""
  mailingStreet: String
  """Zip/PostalCode for the contact"""
  mailingZip: String
  """Primary mobile number for the contact"""
  mobile: String
  """Primary phone number for the contact"""
  phone: String
  """Allow portal access"""
  portalAccess: Boolean
  """Salutation for the contact"""
  salutation: String
  """Job title of the contact"""
  title: String
  """Datetime the contact was last updated"""
  updatedAt: ISO8601DateTime
}

"""Attributes for creating and updating a contact"""
input ContactAttributes {
  """The account the contact belongs to"""
  accountId: ID
  """Campaign code"""
  campaignCode: String
  """Custom unique identifier for the contact"""
  code: String
  """A description of the contact"""
  description: String
  """Email address of the contact"""
  email: String
  """First name of the contact"""
  firstName: String
  """Last name of the contact"""
  lastName: String
  """Link to the contact's LinkedIn profile"""
  linkedinUrl: String
  """City for the contact"""
  mailingCity: String
  """Country of the contact"""
  mailingCountry: String
  """State for the contact"""
  mailingState: String
  """Street address for the contact"""
  mailingStreet: String
  """Zip/PostalCode of the contact"""
  mailingZip: String
  """Primary mobile number for the contact"""
  mobile: String
  """Primary phone number for the contact"""
  phone: String
  """Portal access allowed"""
  portalAccess: Boolean
  """Salutation for the contact"""
  salutation: String
  """Job title of the contact"""
  title: String
}

"""The connection type for Contact."""
type ContactConnection {
  """A list of edges."""
  edges: [ContactEdge]
  """A list of nodes."""
  nodes: [Contact]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of ContactCreate."""
type ContactCreatePayload {
  contact: Contact
  errors: [String!]
}

"""Autogenerated return type of ContactDelete."""
type ContactDeletePayload {
  contact: Contact
  errors: String
}

"""An edge in a connection."""
type ContactEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Contact
}

"""Autogenerated return type of ContactUpdate."""
type ContactUpdatePayload {
  contact: Contact
  errors: String
}

"""The coupon record that can be applied to a subscription"""
type Coupon {
  """Is the coupon active"""
  active: Boolean!
  """Unique coupon code"""
  couponCode: String!
  """Datetime the coupon was created"""
  createdAt: ISO8601DateTime!
  """Currency ID of the coupon"""
  currencyId: ID
  """Description of the coupon"""
  description: String
  """Amount of the discount"""
  discountAmount: Float
  """Type of discount the coupon applies"""
  discountKind: CouponDiscountKind!
  """Percent of the discount"""
  discountPercentage: Float
  """Unique ID for the coupon"""
  id: ID!
  """Name of the coupon"""
  name: String!
  """Plan ID the coupon applies to"""
  planId: ID
  """Date the coupon expires"""
  redemptionEndDate: ISO8601Date
  """Number of times the coupon has been redeemed"""
  redemptionsCount: Int
  """Maximum number of times the coupon can be redeemed"""
  redemptionsMax: Int
  """Datetime the coupon was last updated"""
  updatedAt: ISO8601DateTime!
}

"""Attributes for creating and updating a coupon"""
input CouponAttributes {
  """Is the coupon active"""
  active: Boolean
  """Unique coupon code"""
  couponCode: String
  """Currency ID of the coupon"""
  currencyId: ID
  """Description of the coupon"""
  description: String
  """Amount of the discount"""
  discountAmount: Float
  """Type of discount the coupon applies"""
  discountKind: CouponDiscountKind
  """Percent of the discount"""
  discountPercentage: Float
  """Name of the coupon"""
  name: String
  """Date the coupon expires"""
  redemptionEndDate: ISO8601Date
  """Maximum number of times the coupon can be redeemed"""
  redemptionsMax: Int
}

"""The connection type for Coupon."""
type CouponConnection {
  """A list of edges."""
  edges: [CouponEdge]
  """A list of nodes."""
  nodes: [Coupon]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of CouponCreate."""
type CouponCreatePayload {
  coupon: Coupon
  errors: [String!]
}

"""Autogenerated return type of CouponDelete."""
type CouponDeletePayload {
  coupon: Coupon
  errors: String
}

enum CouponDiscountKind {
  """Amount"""
  AMOUNT
  """Percentage"""
  PERCENTAGE
}

"""An edge in a connection."""
type CouponEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Coupon
}

"""Autogenerated return type of CouponUpdate."""
type CouponUpdatePayload {
  coupon: Coupon
  errors: [String!]
}

type CouponValidate {
  couponIsValid: Boolean!
}

input CreditItemAttributes {
  amount: Float!
  id: ID!
}

type CreditNote {
  account: Account!
  accountId: ID!
  amount: Float!
  amountApplied: Float!
  amountUnapplied: Float!
  appliedToInvoices(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): InvoiceConnection
  createdAt: ISO8601DateTime!
  creditNoteItems: [CreditNoteItem!]
  creditedInvoice: Invoice
  creditedInvoiceId: ID
  currencyId: ID!
  description: String!
  disputeReason: DisputeReason
  disputeReasonId: ID
  entity: Entity!
  entityId: ID!
  id: ID
  isCredit: Boolean!
  isLegacy: Boolean!
  issuedAt: ISO8601Date
  kind: CreditNoteKind!
  number: String
  operations: [String!]!
  state: CreditNoteState!
  subtotal: Float!
  taxAmount: Float!
  updatedAt: ISO8601DateTime!
  uuid: ID!
  warren: Warren!
  warrenId: ID!
}

"""Autogenerated return type of CreditNoteApplyToInvoices."""
type CreditNoteApplyToInvoicesPayload {
  creditNote: CreditNote
  errors: [String!]
  paidInvoices: [Invoice!]
  paymentApplications: [PaymentApplication!]
  removedInvoices: [Invoice!]
}

input CreditNoteAttributes {
  creditNoteItems: [CreditNoteItemAttributes!]
  disputeReasonId: ID
  kind: CreditNoteKind
}

"""The connection type for CreditNote."""
type CreditNoteConnection {
  """A list of edges."""
  edges: [CreditNoteEdge]
  """A list of nodes."""
  nodes: [CreditNote]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of CreditNoteCreate."""
type CreditNoteCreatePayload {
  creditNote: CreditNote
  errors: [String!]
}

"""Autogenerated return type of CreditNoteDelete."""
type CreditNoteDeletePayload {
  creditNote: CreditNote
  errors: [String!]
}

"""An edge in a connection."""
type CreditNoteEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: CreditNote
}

"""Autogenerated return type of CreditNoteIssue."""
type CreditNoteIssuePayload {
  """The issued credit note"""
  creditNote: Invoice
}

type CreditNoteItem {
  amount: Float!
  currencyId: String!
  discount: Float
  id: ID
  invoiceItem: InvoiceItem
  invoiceItemId: ID
  lineText: String
  position: Int
  price: Float
  priceDecimals: Int!
  priceTiers: [FormattedChargePriceTier!]
  prorationRate: Float
  quantity: Int
  subtotal: Float!
  taxAmount: Float
  taxCode: String
  vatCode: String
}

input CreditNoteItemAttributes {
  amount: Float!
  id: ID!
}

enum CreditNoteKind {
  """Credit credit note"""
  CREDIT
  """Refund credit note"""
  REFUND
  """Write_off credit note"""
  WRITE_OFF
}

enum CreditNoteState {
  """Applied credit note"""
  APPLIED
  """Draft credit note"""
  DRAFT
  """Partially_applied credit note"""
  PARTIALLY_APPLIED
  """Preparing credit note"""
  PREPARING
  """Ready credit note"""
  READY
}

"""Autogenerated return type of CreditNoteUpdate."""
type CreditNoteUpdatePayload {
  creditNote: CreditNote
  errors: [String!]
}

"""Autogenerated return type of CreditNoteUpdateTaxes."""
type CreditNoteUpdateTaxesPayload {
  creditNote: CreditNote
  errors: [String!]
}

type Currency {
  conversionRate: BigDecimal
  conversionType: CurrencyConversionType
  enabled: Boolean!
  id: ID
  isoCode: String!
  isoNumeric: String
  name: String!
  priority: Int!
  symbol: String
  symbolFirst: Boolean
}

input CurrencyAttributes {
  conversionRate: BigDecimal
  conversionType: CurrencyConversionType
  enabled: Boolean
  isoCode: String
  name: String
  priority: Int
  realtime: Boolean
}

"""The connection type for Currency."""
type CurrencyConnection {
  """A list of edges."""
  edges: [CurrencyEdge]
  """A list of nodes."""
  nodes: [Currency]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

enum CurrencyConversionType {
  """Convert to base currency via fixed conversion rate"""
  fixed
  """Convert to base currency using conversion rate lookup"""
  lookup
}

"""Autogenerated return type of CurrencyCreate."""
type CurrencyCreatePayload {
  currency: Currency!
  errors: String
}

"""An edge in a connection."""
type CurrencyEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Currency
}

"""Autogenerated return type of CurrencyUpdate."""
type CurrencyUpdatePayload {
  currency: Currency!
  errors: String
}

type CurrentUser {
  accountName: String
  authObject: AuthObject
  authObjectName: String
  entityId: ID
  featureFlags: [FeatureFlag!]!
  payload: CurrentUserPayload
  plugins: [Plugin!]
  privacyUrl: String
  scopes: [String!]!
  tabnameIsSubdomain: Boolean
  """List of account fields required for taxation"""
  taxationRequiredAccountFields: [String!]
  termsUrl: String
  user: User!
  warren: Warren!
}

input CurrentUserAttributes {
  entityId: ID
  firstName: String
  lastName: String
  profile: UserProfileAttributes
}

type CurrentUserPayload {
  """URL used as home location"""
  returnUrl: String
}

"""Autogenerated return type of CurrentUserUpdate."""
type CurrentUserUpdatePayload {
  entityId: ID
  errors: [String!]
  firstName: String!
  lastName: String!
  profile: UserProfile
}

type DateOption {
  """Suggested quote date end"""
  endDate: ISO8601Date!
  """Suggested quote date title"""
  label: String!
}

"""A deal represents an opportunity to increase revenue"""
type Deal {
  """Account the deal belongs to"""
  account: Account
  """Account that the deal belongs to"""
  accountId: ID
  """Total value of the deal"""
  amount: Float
  """Datetime the deal closed"""
  closeDate: ISO8601Date
  """Unique code"""
  code: String
  """Primary contact for the deal"""
  contact: Contact
  """Primary contact for the deal"""
  contactId: ID
  """Datetime the deal was created"""
  createdAt: ISO8601DateTime!
  """Primary currency for billing"""
  currency: Currency
  """Primary currency for billing"""
  currencyId: ID
  """Current stage of the deal"""
  dealStage: Deal!
  """Current stage of the deal"""
  dealStageId: ID!
  """Description of the deal"""
  description: String
  """The entity this deal belongs to"""
  entity: Entity
  """The ID of the entity this deal belongs to"""
  entityId: ID
  """Unique identifier for the deal"""
  id: ID!
  """The kind of deal"""
  kind: DealKind
  """Lead source for the deal"""
  leadSourceId: ID
  """Name of the deal"""
  name: String!
  """Will exclude this deal from analytics"""
  notForRevenue: Boolean
  """Describes the origin of the deal: sales, portal, signup etc"""
  origin: DealOrigin
  """Owner of the deal"""
  owner: User
  """Owner of the deal"""
  ownerUserId: ID
  """Probability that the deal will close"""
  probability: Int
  """Default values for a new quote based on this deal"""
  quoteDefaults: Quote
  """Quotes on the deal"""
  quotes: [Quote!]!
  """Description of the deal stage"""
  stageDescription: ID
  """Datetime the deal was last updated"""
  updatedAt: ISO8601DateTime!
  """Whether the deal was created from Portal UI or not"""
  viaPortal: Boolean
}

"""Attributes for creating and updating a contact"""
input DealAttributes {
  """Account that the deal belongs to"""
  accountId: ID
  """Total value of the deal"""
  amount: Float
  """Datetime the deal closed"""
  closeDate: ISO8601Date
  """Unique code"""
  code: String
  """Primary contact for the deal"""
  contactId: ID
  """Primary currency for billing"""
  currencyId: ID
  """Current stage of the deal"""
  dealStageId: ID
  """Description of the deal"""
  description: String
  """The kind of deal"""
  kind: DealKind
  """Lead source for the deal"""
  leadSourceId: ID
  """Name that describes the deal"""
  name: String
  """Used for test accounts and the like"""
  notForRevenue: Boolean
  """Describes the origin of the deal: sales, portal, signup etc"""
  origin: DealOrigin
  """Owner of the deal"""
  ownerUserId: ID
  """Probability that the deal will close"""
  probability: Int
  """Used to identify deals coming from Portal UI"""
  viaPortal: Boolean
}

"""The connection type for Deal."""
type DealConnection {
  """A list of edges."""
  edges: [DealEdge]
  """A list of nodes."""
  nodes: [Deal]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of DealCreate."""
type DealCreatePayload {
  deal: Deal
  errors: [String!]
}

"""Autogenerated return type of DealDelete."""
type DealDeletePayload {
  deal: Lead
  errors: [String!]
}

"""An edge in a connection."""
type DealEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Deal
}

"""Kind of deal"""
enum DealKind {
  """Existing business"""
  EXISTING
  """New business"""
  NEW
}

"""Origin of deal"""
enum DealOrigin {
  """Existing business"""
  OTHER
  """Portal"""
  PORTAL
  """Sales"""
  SALES
  """Signup"""
  SIGNUP
}

"""A stage in the sales pipeline"""
type DealStage {
  """Datetime the deal stage was created"""
  createdAt: ISO8601DateTime!
  """Description of the stage"""
  description: String
  """Unique identifier for the deal stage"""
  id: ID!
  """Open, Closed/won or Closed/lost"""
  kind: DealStageKind
  """Name of the deal stage"""
  name: String
  """Position of the stage relative to the other stages"""
  position: Int!
  """Probability of the deal in percent"""
  probability: String
  """Datetime the deal stage was last updated"""
  updatedAt: ISO8601DateTime!
}

"""Attributes for creating and updating a deal stage"""
input DealStageAttributes {
  """Description of the deal stage"""
  description: String
  """Open, Closed/won or Closed/lost"""
  kind: DealStageKind
  """Name of the deal stage"""
  name: String
  """Order of the deal stage in the sales pipeline"""
  position: Int
  """Probability of the deal in percent"""
  probability: Int
}

"""The connection type for DealStage."""
type DealStageConnection {
  """A list of edges."""
  edges: [DealStageEdge]
  """A list of nodes."""
  nodes: [DealStage]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of DealStageCreate."""
type DealStageCreatePayload {
  dealStage: DealStage
  errors: [String!]
}

"""Autogenerated return type of DealStageDelete."""
type DealStageDeletePayload {
  dealStage: DealStage
  errors: String
}

"""An edge in a connection."""
type DealStageEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: DealStage
}

enum DealStageKind {
  """CLOSED_LOST"""
  CLOSED_LOST
  """CLOSED_WON"""
  CLOSED_WON
  """OPEN"""
  OPEN
}

"""Autogenerated return type of DealStageUpdate."""
type DealStageUpdatePayload {
  dealStage: DealStage
  errors: [String!]
}

"""Autogenerated return type of DealUpdate."""
type DealUpdatePayload {
  deal: Deal
  errors: [String!]
}

"""Autogenerated return type of DemoDataCreate."""
type DemoDataCreatePayload {
  errors: String
  response: JSON
}

"""Autogenerated return type of DemoDataDelete."""
type DemoDataDeletePayload {
  errors: String
}

type DisputeReason {
  description: String
  id: ID
  name: String
}

input DisputeReasonAttributes {
  description: String
  name: String
}

"""The connection type for DisputeReason."""
type DisputeReasonConnection {
  """A list of edges."""
  edges: [DisputeReasonEdge]
  """A list of nodes."""
  nodes: [DisputeReason]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of DisputeReasonCreate."""
type DisputeReasonCreatePayload {
  disputeReason: DisputeReason
  errors: [String!]
}

"""Autogenerated return type of DisputeReasonDelete."""
type DisputeReasonDeletePayload {
  disputeReason: DisputeReason
  errors: String
}

"""An edge in a connection."""
type DisputeReasonEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: DisputeReason
}

"""Autogenerated return type of DisputeReasonUpdate."""
type DisputeReasonUpdatePayload {
  disputeReason: DisputeReason
  errors: [String!]
}

type Document {
  date: ISO8601DateTime!
  filename: String!
  id: ID!
  size: String!
  url: String!
}

type DynamicComponent {
  column: String!
  format: DynamicComponentFormat
  name: String!
  title: String!
  tooltip: String
  type: DynamicComponentType!
  value: String
}

input DynamicComponentAttributes {
  key: String!
  value: DynamicComponentValue!
}

enum DynamicComponentFormat {
  """Binary value, True or False"""
  BOOLEAN
  """Copyable"""
  COPY
  """Number representing an amount of money of a particular region"""
  CURRENCY
  """Human radable Date string"""
  DATE
  """Human radable Date with Time string"""
  DATETIME
  """Human Readable string"""
  HUMANIZE
  """Expresion of a Number"""
  NUMERIC
  """Rate, amount or number in a hundred"""
  PERCENTAGE
  """Copyable, hideable"""
  SECRET
}

enum DynamicComponentType {
  """Multiple option input"""
  COMBO
  """Date Picker control"""
  DATEPICKER
  """Non editable text"""
  DESCRIPTION
  """Text Input field"""
  INPUT
  """Switch Input for boolean values"""
  SWITCH
  """Text Area input"""
  TEXTAREA
}

"""Dynamic component value"""
scalar DynamicComponentValue

type Email {
  account: Account
  accountId: ID
  body: String!
  bodyRendered: String!
  contact: Contact
  contactId: ID
  contentType: String!
  createdAt: ISO8601DateTime
  formattedCreatedAt: String!
  formattedUpdatedAt: String!
  id: ID!
  recipient: String!
  state: EmailState!
  statusMessage: String
  statusSubtype: String
  subject: String!
  updatedAt: ISO8601DateTime
  uuid: String!
  warren: Warren!
  workflow: Workflow
}

"""Autogenerated return type of EmailBrandingReset."""
type EmailBrandingResetPayload {
  company: Company!
  errors: [String!]
}

"""The connection type for Email."""
type EmailConnection {
  """A list of edges."""
  edges: [EmailEdge]
  """A list of nodes."""
  nodes: [Email]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type EmailEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Email
}

type EmailRecipient {
  id: ID!
  name: String!
}

"""Autogenerated return type of EmailRetry."""
type EmailRetryPayload {
  email: Email!
  errors: [String!]
}

enum EmailState {
  """Email was delivered successfully"""
  delivered
  """Outbound emails disabled"""
  disabled
  """Email delivery failed"""
  failed
  """Email is being procesed"""
  processing
  """Email is being procesed"""
  queued
  """Email is delayed"""
  retrying
}

type Entity {
  """Short name of the company"""
  abbreviation: String!
  """Accent color used for the customer portal"""
  accentColor: String
  """Base currency for the entity"""
  baseCurrencyId: ID!
  """City for billing"""
  billingCity: String
  """Country for billing"""
  billingCountry: String
  """State for billing"""
  billingState: String
  """Street address for billing"""
  billingStreet: String
  """Zip/PostalCode for billing"""
  billingZip: String
  """Brand color used for the customer portal"""
  brandColor: String
  """Datetime that the company was created"""
  createdAt: ISO8601DateTime!
  """Email address for customer service"""
  customerServiceEmail: String
  """The name that will appear as sender in the inbox"""
  emailSenderName: String
  """Email template"""
  emailTemplate: String!
  """Primary fax number for the company"""
  fax: String
  """The first month of the fiscal year (0-11)"""
  fiscalYearStartMonth: Int
  id: ID
  """Prefix value for all invoice numbers. e.g. INV"""
  invoiceNumberPrefix: String
  """Number to start invoice numbers from"""
  invoiceNumberSeq: Int
  invoicesImageUrl: String
  """
  New accounts will automatically be assigned to the default entity if none is specified
  """
  isDefault: Boolean
  """Name of the company"""
  name: String
  """Primary phone number for the company"""
  phone: String
  """Link to the company's privacy policfy"""
  privacyUrl: String
  """Prefix value for all quote numbers. e.g. ABC"""
  quoteNumberPrefix: String
  """Number to start quote numbers from"""
  quoteNumberSeq: Int
  quotesImageUrl: String
  """Link to the company's refund policy"""
  refundPolicyUrl: String
  """Tax ID to display on invoices"""
  taxId: String
  """Tax type to display on invoices"""
  taxType: TaxType
  """Link to the company's terms of service"""
  termsUrl: String
  """Timezone for the company"""
  timezone: String
  topNavImageUrl: String
  """Timezone identifier"""
  tzIdentifier: String
  """Timezone offset"""
  tzOffset: String
  """Datetime that the company was last updated"""
  updatedAt: ISO8601DateTime!
  """Company website address"""
  website: String
}

input EntityAttributes {
  """Short name of the entity"""
  abbreviation: String
  """Accent color used for the customer portal"""
  accentColor: String
  """Base currency for the entity"""
  baseCurrencyId: ID
  """City for billing"""
  billingCity: String
  """Country for billing"""
  billingCountry: String
  """State for billing"""
  billingState: String
  """Street address for billing"""
  billingStreet: String
  """Zip/PostalCode for billing"""
  billingZip: String
  """Brand color used for the customer portal"""
  brandColor: String
  """Email address for customer service"""
  customerServiceEmail: String
  """The name that will appear as sender in the inbox"""
  emailSenderName: String
  """Email template"""
  emailTemplate: String
  """Primary fax number for the company"""
  fax: String
  """The first month of the fiscal year (0-11)"""
  fiscalYearStartMonth: Int
  """Prefix value for all invoice numbers. e.g. INV"""
  invoiceNumberPrefix: String
  """Number to start invoice numbers from"""
  invoiceNumberSeq: Int
  """
  New accounts will automatically be assigned to the default entity if none is specified
  """
  isDefault: Boolean
  """Name of the entity"""
  name: String
  """Primary phone number for the company"""
  phone: String
  """Link to the company's privacy policfy"""
  privacyUrl: String
  """Prefix value for all quote numbers. e.g. ABC"""
  quoteNumberPrefix: String
  """Number to start quote numbers from"""
  quoteNumberSeq: Int
  """Link to the company's refund policy"""
  refundPolicyUrl: String
  """Tax ID to display on invoices"""
  taxId: String
  """Tax type to display on invoices"""
  taxType: TaxType
  """Link to the company's terms of service"""
  termsUrl: String
  """Timezone for the company"""
  timezone: String
  """Company website address"""
  website: String
}

type EntityBranding {
  """Accent color used for the customer portal"""
  accentColor: String
  """Brand color used for the customer portal"""
  brandColor: String
  invoicesImageUrl: String!
  quotesImageUrl: String!
  topNavImageUrl: String!
}

"""The connection type for Entity."""
type EntityConnection {
  """A list of edges."""
  edges: [EntityEdge]
  """A list of nodes."""
  nodes: [Entity]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of EntityCreate."""
type EntityCreatePayload {
  entity: Entity
  errors: [String!]
}

"""Autogenerated return type of EntityDelete."""
type EntityDeletePayload {
  entity: Entity!
  errors: [String!]
}

"""Autogenerated return type of EntityDuplicate."""
type EntityDuplicatePayload {
  entity: Entity
  errors: [String!]!
}

"""An edge in a connection."""
type EntityEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Entity
}

"""Autogenerated return type of EntityUpdate."""
type EntityUpdatePayload {
  entity: Entity
  errors: [String!]
}

"""Autogenerated return type of EntityValidateAddress."""
type EntityValidateAddressPayload {
  entity: Entity
}

type Event {
  actor: String!
  description: String!
  eventTimestamp: ISO8601DateTime!
  eventTimestampFormatted: String!
  eventTypeId: Int!
  id: ID!
  longDescription: String!
  objectType: String
  payload: JSON!
  severity: String!
  shortDescription: String!
  timeAgo: String!
  uuid: String!
}

"""The connection type for Event."""
type EventConnection {
  """A list of edges."""
  edges: [EventEdge]
  """A list of nodes."""
  nodes: [Event]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

type EventDetail {
  eventDetailChanges: [EventDetailChange!]
  eventDetailItems: [EventDetailItem!]
  id: ID!
}

type EventDetailChange {
  attribute: String!
  changedFrom: String
  changedTo: String
}

type EventDetailItem {
  content: String!
  header: String!
}

"""An edge in a connection."""
type EventEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Event
}

type Feature {
  chargeType: ChargeType
  code: String
  createdAt: ISO8601DateTime!
  description: String
  id: ID!
  isProvisioned: Boolean
  isUnit: Boolean
  isVisible: Boolean
  kind: FeatureKind
  name: String!
  plans: [Plan!]
  position: Int!
  productId: ID
  unitName: String
  updatedAt: ISO8601DateTime!
}

"""Attributes for creating and updating plan features"""
input FeatureAttributes {
  code: String
  description: String
  isProvisioned: Boolean
  isUnit: Boolean
  isVisible: Boolean
  kind: FeatureKind
  name: String
  position: Int
  """
  Describes how usage should be aggregated during a
                                                                                        billing period. Must be one of sum, max, last
  """
  usageCalculationType: UsageCalculation
}

"""The connection type for Feature."""
type FeatureConnection {
  """A list of edges."""
  edges: [FeatureEdge]
  """A list of nodes."""
  nodes: [Feature]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of FeatureCreate."""
type FeatureCreatePayload {
  errors: [String!]
  feature: Feature
}

"""Autogenerated return type of FeatureDelete."""
type FeatureDeletePayload {
  errors: [String!]
  success: Boolean
}

"""An edge in a connection."""
type FeatureEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Feature
}

type FeatureFlag {
  code: String
  quantity: Int
}

input FeatureFlagAttributes {
  code: String
  quantity: Int
}

enum FeatureKind {
  """True or false"""
  BOOLEAN
  """Feature group"""
  GROUP
  """Quantity"""
  QUANTITY
  """Takes a value when used on a plan"""
  VALUE
}

"""Autogenerated return type of FeatureUpdate."""
type FeatureUpdatePayload {
  errors: [String!]
  feature: Feature
}

type FeatureUsage {
  account: Account
  accountId: ID
  createdAt: ISO8601DateTime!
  feature: Feature
  featureId: ID
  id: ID!
  plan: Plan
  product: Product
  quantity: Float!
  subscription: Subscription
  subscriptionChargeId: ID
  subscriptionId: ID
  updatedAt: ISO8601DateTime!
  usageAt: ISO8601DateTime!
}

"""Attributes for creating feature usage"""
input FeatureUsageAttributes {
  accountId: ID
  featureCode: String
  featureId: ID
  quantity: Float
  subscriptionChargeId: ID
  subscriptionId: ID
  usageAt: ISO8601DateTime
}

"""The connection type for FeatureUsage."""
type FeatureUsageConnection {
  """A list of edges."""
  edges: [FeatureUsageEdge]
  """A list of nodes."""
  nodes: [FeatureUsage]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of FeatureUsageCreate."""
type FeatureUsageCreatePayload {
  errors: String
  featureUsage: FeatureUsage
}

"""Autogenerated return type of FeatureUsageDelete."""
type FeatureUsageDeletePayload {
  errors: String
  featureUsage: FeatureUsage
}

"""An edge in a connection."""
type FeatureUsageEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: FeatureUsage
}

"""Autogenerated return type of FeatureUsageUpdate."""
type FeatureUsageUpdatePayload {
  errors: String
  featureUsage: FeatureUsage
}

type Field {
  computed: Boolean
  kind: FieldKind!
  label: String!
  name: String!
  values: [FieldValue!]
}

input FieldAttributes {
  description: String
  id: ID
  kind: String
  label: String
  name: String
  objId: ID
  required: Boolean
}

"""The connection type for Field."""
type FieldConnection {
  """A list of edges."""
  edges: [FieldEdge]
  """A list of nodes."""
  nodes: [Field]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of FieldCreate."""
type FieldCreatePayload {
  errors: [String!]
  field: Field
}

"""An edge in a connection."""
type FieldEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Field
}

enum FieldKind {
  """Boolean"""
  BOOL
  """Currency"""
  CURRENCY
  """Date"""
  DATE
  """Decimal"""
  DECIMAL
  """Enumerable"""
  ENUM
  """Integer"""
  INT
  """Many Relation"""
  MANY_RELATION
  """Relation"""
  RELATION
  """String"""
  STRING
  """Timestamp"""
  TIMESTAMP
}

"""Autogenerated return type of FieldUpdate."""
type FieldUpdatePayload {
  errors: [String!]
  field: Field
}

type FieldValue {
  appliesTo: [String!]
  color: String
  id: ID!
  name: String!
}

"""The financial account record used for accounting"""
type FinancialAccount {
  """The account the financial account belongs to"""
  accountId: ID
  """The account number of the financial account"""
  accountNumber: String
  """The type of the financial account"""
  accountType: FinancialAccountType
  """The label of the financial account type"""
  accountTypeLabel: String
  """Whether the financial account is active"""
  active: Boolean
  """Custom unique identifier for the financial account"""
  code: String
  """Datetime the financial account was created"""
  createdAt: ISO8601DateTime
  """Whether the financial account is the default for the type"""
  defaultAccount: Boolean
  """A description of the financial account"""
  description: String
  """The entity this account belongs to"""
  entity: Entity
  """The entity the financial account belongs to"""
  entityId: ID!
  """The external ID of the financial account"""
  externalId: String
  """Unique ID for the financial account"""
  id: ID
  """The name and code of the financial account"""
  longName: String
  """The name of the financial account"""
  name: String
  """The plugin ID of the financial account"""
  pluginId: ID
  priceListChargeIds: [ID!]
  """The source of the financial account"""
  source: String
  """Datetime the financial account was last updated"""
  updatedAt: ISO8601DateTime
}

"""Attributes for creating and updating a financial account"""
input FinancialAccountAttributes {
  """The account the financial account belongs to"""
  accountId: ID
  """The account number of the financial account"""
  accountNumber: String
  """The type of the financial account"""
  accountType: FinancialAccountType
  """Whether the financial account is active"""
  active: Boolean
  """Custom unique identifier for the financial account"""
  code: String
  """Datetime the financial account was created"""
  createdAt: ISO8601DateTime
  """Whether the financial account is the default"""
  defaultAccount: Boolean
  """A description of the financial account"""
  description: String
  """The entity the financial account belongs to"""
  entityId: ID
  """The external ID of the financial account"""
  externalId: String
  """The name of the financial account"""
  name: String
  """The plugin ID of the financial account"""
  pluginId: ID
  priceListChargeIds: [ID!]
  """The source of the financial account"""
  source: String
  """Datetime the financial account was last updated"""
  updatedAt: ISO8601DateTime
}

"""The connection type for FinancialAccount."""
type FinancialAccountConnection {
  """A list of edges."""
  edges: [FinancialAccountEdge]
  """A list of nodes."""
  nodes: [FinancialAccount]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of FinancialAccountCreate."""
type FinancialAccountCreatePayload {
  errors: [String!]
  financialAccount: FinancialAccount
}

"""Autogenerated return type of FinancialAccountDelete."""
type FinancialAccountDeletePayload {
  errors: String
  financialAccount: FinancialAccount
}

"""An edge in a connection."""
type FinancialAccountEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: FinancialAccount
}

enum FinancialAccountType {
  """Accounts receivable"""
  accounts_receivable
  """Banking fees"""
  banking_fees
  """Conversion gain"""
  conversion_gain
  """Conversion loss"""
  conversion_loss
  """CPCA"""
  cpca
  """Deferred revenue"""
  deferred_revenue
  """Earned revenue"""
  earned_revenue
  """Payments"""
  payments
  """Tax payable"""
  tax_payable
}

"""Autogenerated return type of FinancialAccountUpdate."""
type FinancialAccountUpdatePayload {
  errors: [String!]
  financialAccount: FinancialAccount
}

type FormattedChargePriceTier {
  ends: Int
  price: Float
  starts: Int!
}

type FormattedCreditNote {
  amount: Float
  amountDue: Float
  amountPaid: Float
  billingCity: String
  billingCountry: String
  billingState: String
  billingStreet: String
  billingZip: String
  createdAt: ISO8601DateTime
  creditedInvoice: Invoice
  creditedInvoiceId: ID
  credits: Float
  currency: String
  currencyId: String
  currencySymbol: String
  customerBillingCity: String
  customerBillingContact: String
  customerBillingCountry: String
  customerBillingState: String
  customerBillingStreet: String
  customerBillingZip: String
  customerName: String
  dueAt: ISO8601Date
  formattedLines: [FormattedLine!]!
  html: String
  id: ID!
  isLegacy: Boolean
  messages: [InvoiceMessage!]
  netPaymentDays: Int
  number: String
  object: CreditNote!
  payableId: ID!
  poNumber: String
  printedState: String
  salesContactEmail: String
  smallUnitAmountDue: Int
  state: CreditNoteState!
  subscriptionEndDate: ISO8601Date
  subscriptionStartDate: ISO8601Date
  subtotal: Float
  taxAmount: Float
  taxCode: String
  """Tax ID to display on invoices"""
  taxId: String
  taxNumber: String
  """Tax type to display on invoices"""
  taxType: TaxType
  uuid: String
  vatCode: String
  vendorName: String
}

type FormattedInvoice {
  amount: Float
  amountDue: Float
  amountPaid: Float
  billingCity: String
  billingCountry: String
  billingState: String
  billingStreet: String
  billingZip: String
  createdAt: ISO8601DateTime
  credits: Float
  currency: String
  currencyId: String
  currencySymbol: String
  customerBillingCity: String
  customerBillingContact: String
  customerBillingCountry: String
  customerBillingState: String
  customerBillingStreet: String
  customerBillingZip: String
  customerName: String
  dueAt: ISO8601Date
  formattedLines: [FormattedLine!]!
  html: String
  id: ID!
  isLegacy: Boolean
  messages: [InvoiceMessage!]
  netPaymentDays: Int
  number: String
  object: Invoice!
  payableId: ID!
  poNumber: String
  printedState: String
  salesContactEmail: String
  smallUnitAmountDue: Int
  state: InvoiceState!
  subscriptionEndDate: ISO8601Date
  subscriptionStartDate: ISO8601Date
  subtotal: Float
  taxAmount: Float
  taxCode: String
  """Tax ID to display on invoices"""
  taxId: String
  taxNumber: String
  """Tax type to display on invoices"""
  taxType: TaxType
  uuid: String
  vatCode: String
  vendorName: String
}

type FormattedLine {
  amount: Float!
  billingPeriodEnd: String
  billingPeriodStart: String
  charge: Charge!
  chargeKind: QuoteChangeKind
  """Quote charge or Subscription charge"""
  chargeType: String
  couponId: ID
  currencyId: String!
  discount: Float
  frequency: String
  id: ID
  isCoupon: Boolean!
  isRamp: Boolean!
  lineText: String
  planName: String!
  position: Int
  price: Float!
  priceDecimals: Int!
  priceListChargeId: ID
  priceListChargeName: String
  priceListId: ID
  priceListName: String
  priceTiers: [FormattedChargePriceTier!]
  pricingModel: String!
  productName: String!
  prorationRate: Float
  quantity: Int
  showProductNameOnLineItem: Boolean!
  taxAmount: Float
  taxCode: String
  """The feature name"""
  unitOfMeasure: String
  vatCode: String
}

type FormattedQuote {
  acceptedAt: ISO8601DateTime
  acceptedByName: String
  acceptedByTitle: String
  amount: Float!
  amountDue: Float!
  amountsByPeriod: [PeriodAmount!]!
  approvalRequest: ApprovalRequest
  billingCity: String
  billingCountry: String
  billingState: String
  billingStreet: String
  billingZip: String
  contactEmail: String
  contactName: String
  currency: String
  customerBillingCity: String
  customerBillingCountry: String
  customerBillingState: String
  customerBillingStreet: String
  customerBillingZip: String
  customerName: String
  dealOwnerEmail: String
  dealOwnerName: String
  discount: Float!
  discountValue: Float!
  documents: [Document!]
  duration: String
  endDate: ISO8601Date
  evergreen: Boolean!
  expiresAt: ISO8601Date
  formattedLines: [QuoteLine!]!
  html: String
  netPaymentDays: Int
  notes: String
  number: String
  object: Quote!
  payableId: ID
  poNumberRequired: Boolean
  salesContactEmail: String
  sharedAt: ISO8601Date
  startDate: ISO8601Date
  state: QuoteState!
  subtotal: Float!
  taxAmount: Float!
  taxId: String
  taxNumberLabel: String
  taxNumberRequired: Boolean
  taxType: String
  vendorName: String
}

type Group {
  id: ID!
  name: String!
  parentGroupId: ID
}

input GroupAttributes {
  name: String
  parentGroupId: ID
}

"""The connection type for Group."""
type GroupConnection {
  """A list of edges."""
  edges: [GroupEdge]
  """A list of nodes."""
  nodes: [Group]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of GroupCreate."""
type GroupCreatePayload {
  errors: [String!]
  group: Group
}

"""Autogenerated return type of GroupDelete."""
type GroupDeletePayload {
  errors: String
  group: Group
}

"""An edge in a connection."""
type GroupEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Group
}

"""Autogenerated return type of GroupUpdate."""
type GroupUpdatePayload {
  errors: [String!]!
  group: Group
  groups: [Group!]
}

type Histogram {
  data: [HistogramData!]
  dataInterval: HistogramDataIntervalEnum!
  feature: Feature!
  periodRange: String!
  subscriptionCharge: SubscriptionCharge!
}

type HistogramData {
  intervals: [HistogramDataInterval!]!
  intervalsTotal: Float!
  periodEnd: ISO8601DateTime!
  periodStart: ISO8601DateTime!
}

type HistogramDataInterval {
  intervalStart: ISO8601DateTime!
  intervalUsage: Float!
}

enum HistogramDataIntervalEnum {
  """Monthly interval"""
  DAILY
  """Monthly interval"""
  MONTHLY
  """Quarterly interval"""
  QUARTERLY
  """Semiannually interval"""
  SEMIANNUALLY
  """Yearly interval"""
  YEARLY
}

"""An ISO 8601-encoded date"""
scalar ISO8601Date

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

"""Industry for accounts and deals"""
type Industry {
  """Datetime the industry was created"""
  createdAt: ISO8601DateTime!
  globalId: ID
  """Unique identifier for the industry"""
  id: ID!
  """Name of the industry"""
  name: String
  """Datetime the industry was last updated"""
  updatedAt: ISO8601DateTime!
}

"""Attributes for creating and updating an industry"""
input IndustryAttributes {
  globalId: ID
  """Name of the industry"""
  name: String!
}

"""The connection type for Industry."""
type IndustryConnection {
  """A list of edges."""
  edges: [IndustryEdge]
  """A list of nodes."""
  nodes: [Industry]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of IndustryCreate."""
type IndustryCreatePayload {
  errors: [String!]
  industry: Industry
}

"""An edge in a connection."""
type IndustryEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Industry
}

type IntracomVat {
  """Account"""
  account: Account
  """Account ID"""
  accountId: ID!
  """Billing city of the account"""
  billingCity: String
  """Billing country of the account"""
  billingCountry: String!
  """Billing state of the account"""
  billingState: String
  """Billing street of the account"""
  billingStreet: String
  """Billing zip of the account"""
  billingZip: String
  """Currency ID"""
  currencyId: ID!
  id: ID
  """Month of the invoice"""
  month: ISO8601Date!
  """Month name and year"""
  monthNameYear: String!
  """Tax number of the account"""
  taxNumber: String
  """Invoice total for period less credits"""
  totalAmount: Float!
}

"""The connection type for IntracomVat."""
type IntracomVatConnection {
  """A list of edges."""
  edges: [IntracomVatEdge]
  """A list of nodes."""
  nodes: [IntracomVat]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type IntracomVatEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: IntracomVat
}

type Invoice {
  account: Account
  accountId: ID!
  amount: Float!
  amountDue: Float
  amountPaid: Float
  couponApplied: Boolean!
  createdAt: ISO8601DateTime!
  creditItem: InvoiceItem
  creditNotes: [CreditNote!]
  credits: Float
  currencyId: ID!
  description: String!
  dueAt: ISO8601Date
  """IDs are null when object is previewed"""
  id: ID
  invoiceItems: [InvoiceItem!]
  isLegacy: Boolean!
  issuedAt: ISO8601Date
  kind: String!
  netPaymentDays: Int!
  """Invoice number. Blank when invoice is being prepared"""
  number: String
  operations: [String!]!
  paidAt: ISO8601DateTime
  payableId: ID
  """Payments applied to this invoice"""
  paymentApplications: [PaymentApplication!]
  payments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): PaymentConnection
  poNumber: String
  """URL to the invoice within the customer portal"""
  portalUrl: String!
  quote: Quote
  quoteId: ID
  smallUnitAmountDue: Int
  state: InvoiceState!
  subtotal: Float!
  taxAmount: Float!
  transactionRecord: Transaction!
  updatedAt: ISO8601DateTime!
  """URL to the invoice within the Bunny app"""
  url: String!
  uuid: ID!
}

"""Autogenerated return type of InvoiceAddCredit."""
type InvoiceAddCreditPayload {
  invoiceItem: InvoiceItem
}

input InvoiceAttributes {
  poNumber: String
}

"""The connection type for Invoice."""
type InvoiceConnection {
  """A list of edges."""
  edges: [InvoiceEdge]
  """A list of nodes."""
  nodes: [Invoice]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of InvoiceCredit."""
type InvoiceCreditPayload {
  creditNote: CreditNote
  errors: [String!]
}

"""Autogenerated return type of InvoiceDeleteCredit."""
type InvoiceDeleteCreditPayload {
  invoiceItem: InvoiceItem
}

"""An edge in a connection."""
type InvoiceEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Invoice
}

"""Autogenerated return type of InvoiceGenerateNextPeriod."""
type InvoiceGenerateNextPeriodPayload {
  errors: [String!]
  invoice: Invoice
}

type InvoiceItem {
  amount: Float!
  charge: Charge!
  chargeType: String
  couponId: ID
  creditNoteItem: CreditNoteItem
  creditedItem: InvoiceItem
  currencyId: String!
  discount: Float
  id: ID
  invoice: Invoice!
  invoiceId: ID!
  isCoupon: Boolean!
  isCredit: Boolean!
  isRamp: Boolean!
  kind: QuoteChangeKind
  lineText: String
  position: Int
  price: Float
  priceDecimals: Int!
  priceTiers: [FormattedChargePriceTier!]
  prorationRate: Float
  quantity: Int
  showProductNameOnLineItem: Boolean!
  subtotal: Float!
  taxAmount: Float
  taxCode: String
  vatCode: String
}

"""The connection type for InvoiceItem."""
type InvoiceItemConnection {
  """A list of edges."""
  edges: [InvoiceItemEdge]
  """A list of nodes."""
  nodes: [InvoiceItem]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type InvoiceItemEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: InvoiceItem
}

type InvoiceMessage {
  ids: [ID!]
  message: String
}

"""Autogenerated return type of InvoiceRefund."""
type InvoiceRefundPayload {
  creditNote: Invoice
  errors: [String!]
}

"""Autogenerated return type of InvoiceRegenerate."""
type InvoiceRegeneratePayload {
  errors: [String!]
  invoice: Invoice
}

"""Autogenerated return type of InvoiceReissue."""
type InvoiceReissuePayload {
  errors: [String!]
  invoice: Invoice
}

"""Autogenerated return type of InvoiceRelease."""
type InvoiceReleasePayload {
  errors: [String!]
  invoice: Invoice
}

"""Autogenerated return type of InvoiceRetryTax."""
type InvoiceRetryTaxPayload {
  errors: [String!]
  invoice: Invoice
}

"""Autogenerated return type of InvoiceSendEmail."""
type InvoiceSendEmailPayload {
  errors: [String!]
  invoice: Invoice!
}

enum InvoiceState {
  """Draft invoice"""
  DRAFT
  """Due invoice"""
  DUE
  """Failed invoice"""
  FAILED
  """Not_due invoice"""
  NOT_DUE
  """Paid invoice"""
  PAID
  """Preparing invoice"""
  PREPARING
  """Processing_payment invoice"""
  PROCESSING_PAYMENT
  """Ready invoice"""
  READY
  """Unpaid invoice"""
  UNPAID
  """Voided invoice"""
  VOIDED
}

type InvoiceTemplate {
  bankDetails: String
  enabled: Boolean
  entityId: ID
  footer: String
  hideZeroAmounts: Boolean
  """IDs are null when object is previewed"""
  id: ID
  includePaymentLink: Boolean
  isDefault: Boolean
  name: String
  poNumberRequired: Boolean
  taxNumberLabel: String
  taxNumberRequired: Boolean
}

input InvoiceTemplateAttributes {
  bankDetails: String
  enabled: Boolean
  entityId: ID
  footer: String
  hideZeroAmounts: Boolean
  includePaymentLink: Boolean
  isDefault: Boolean
  name: String
  poNumberRequired: Boolean
  taxNumberLabel: String
  taxNumberRequired: Boolean
}

"""The connection type for InvoiceTemplate."""
type InvoiceTemplateConnection {
  """A list of edges."""
  edges: [InvoiceTemplateEdge]
  """A list of nodes."""
  nodes: [InvoiceTemplate]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of InvoiceTemplateCreate."""
type InvoiceTemplateCreatePayload {
  errors: [String!]
  invoiceTemplate: InvoiceTemplate
}

"""Autogenerated return type of InvoiceTemplateDelete."""
type InvoiceTemplateDeletePayload {
  errors: [String!]
  invoiceTemplate: InvoiceTemplate
}

"""An edge in a connection."""
type InvoiceTemplateEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: InvoiceTemplate
}

"""Autogenerated return type of InvoiceTemplateUpdate."""
type InvoiceTemplateUpdatePayload {
  errors: [String!]
  invoiceTemplate: InvoiceTemplate
}

"""Autogenerated return type of InvoiceUpdateCredit."""
type InvoiceUpdateCreditPayload {
  errors: [String!]!
  invoiceItem: InvoiceItem
}

input InvoiceUpdateCreditsAttributes {
  invoiceItems: [CreditItemAttributes!]!
}

"""Autogenerated return type of InvoiceUpdateCredits."""
type InvoiceUpdateCreditsPayload {
  errors: [String!]!
  invoiceItems: [InvoiceItem!]
}

"""Autogenerated return type of InvoiceUpdate."""
type InvoiceUpdatePayload {
  errors: [String!]
  invoice: Invoice!
}

"""Autogenerated return type of InvoiceUpdateTaxes."""
type InvoiceUpdateTaxesPayload {
  invoice: Invoice
}

"""Autogenerated return type of InvoiceVoid."""
type InvoiceVoidPayload {
  errors: [String!]
  invoice: Invoice!
}

"""Autogenerated return type of InvoiceWriteOff."""
type InvoiceWriteOffPayload {
  creditNote: Invoice
  errors: [String!]
}

"""Represents untyped JSON"""
scalar JSON

"""Background jobs processed by Bunny"""
type Job {
  """Time the job completed"""
  createdAt: ISO8601DateTime!
  """Number of seconds the job was running"""
  duration: Int
  """Unique identifier for the Job"""
  id: ID!
  """Job name"""
  name: String
  """Notes related to the job"""
  notes: String
  """Notes related to the job"""
  notesExerpt: String
  """The status of the job: running, completed or failed"""
  state: JobStatus
  """Time the job was last updated"""
  updatedAt: ISO8601DateTime!
}

"""The connection type for Job."""
type JobConnection {
  """A list of edges."""
  edges: [JobEdge]
  """A list of nodes."""
  nodes: [Job]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type JobEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Job
}

enum JobStatus {
  """Job completed successfully"""
  completed
  """Job failed"""
  failed
  """Job is running"""
  running
}

"""The Journal Entry represents a financial transaction"""
type JournalEntry {
  date: ISO8601Date!
  description: String
  entity: Entity!
  entityId: ID!
  id: ID!
  invoice: Invoice
  payment: Payment
  source: String!
}

"""The connection type for JournalEntry."""
type JournalEntryConnection {
  """A list of edges."""
  edges: [JournalEntryEdge]
  """A list of nodes."""
  nodes: [JournalEntry]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type JournalEntryEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: JournalEntry
}

"""The Journal Entry Line represents a financial transaction line item"""
type JournalEntryLine {
  credit: Float
  currency: Currency!
  currencyId: String!
  debit: Float
  financialAccount: FinancialAccount!
  financialAccountId: ID!
  id: ID!
  journalEntry: JournalEntry!
  journalEntryId: ID
  source: String
}

"""The connection type for JournalEntryLine."""
type JournalEntryLineConnection {
  """A list of edges."""
  edges: [JournalEntryLineEdge]
  """A list of nodes."""
  nodes: [JournalEntryLine]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type JournalEntryLineEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: JournalEntryLine
}

"""
Leads are used to track potential new opportunities and can be converted to accounts
"""
type Lead {
  """Account that lead has converted to"""
  account: Account
  accountId: ID
  """Type of account"""
  accountType: AccountType
  accountTypeId: ID
  """The campaigns the lead is a member of"""
  campaigns: [Campaign!]!
  """City of the lead"""
  city: String
  """Company of the lead"""
  company: String
  """Company if present, else contact's fullname"""
  companyOrFullName: String
  """Flag indicating if the lead has been converted to an account"""
  converted: Boolean!
  """Datetime the lead was converted to an account"""
  convertedAt: ISO8601DateTime
  """Country of the lead"""
  country: String
  """Datetime the lead was created"""
  createdAt: ISO8601DateTime!
  """Description of the lead"""
  description: String
  """Email address of the contact"""
  email: String
  """Number of employees"""
  employees: Int
  """The entity this lead belongs to"""
  entity: Entity
  """The ID of the entity this lead belongs to"""
  entityId: ID
  """First name of the contact"""
  firstName: String
  """Full name of the contact"""
  fullName: String
  """Group that the lead belongs to"""
  groupId: ID
  """Unique identifier for the lead"""
  id: ID!
  """Industry of the lead"""
  industry: Industry
  """Industry of the lead"""
  industryId: ID
  """Last name of the contact"""
  lastName: String
  """Source of the lead"""
  leadSource: LeadSource
  """Source of the lead"""
  leadSourceId: ID
  """List of lead sources"""
  leadSources: [LeadSource!]
  """Status of the lead"""
  leadStatus: LeadStatus
  """Status of the lead"""
  leadStatusId: ID
  """List of lead statuses"""
  leadStatuses: [LeadStatus!]
  """Link to the contact's LinkedIn profile"""
  linkedinUrl: String
  """Mobile number of the contact"""
  mobile: String
  """Owner of the lead"""
  owner: User
  """Owner of the lead"""
  ownerUserId: ID
  """Phone number of the contact"""
  phone: String
  """Annual revenue of the lead"""
  revenue: Int
  """State of the lead"""
  state: String
  """Street address of the lead"""
  street: String
  """Job title of the contact"""
  title: String
  """Datetime the lead was last updated"""
  updatedAt: ISO8601DateTime!
  """Users with access to the lead"""
  users: [User!]!
  """Company website URL"""
  website: String
  """Zip/PostalCode of the lead"""
  zip: String
}

"""Attributes for creating and updating a lead"""
input LeadAttributes {
  """Type of account"""
  accountTypeId: ID
  """Campaign code"""
  campaignCode: String
  """City of the lead"""
  city: String
  """Company of the lead"""
  company: String
  """Datetime the lead was converted to an account"""
  convertedAt: ISO8601DateTime
  """Country of the lead"""
  country: String
  """Datetime the lead was created"""
  createdAt: ISO8601DateTime
  """Description of the lead"""
  description: String
  """Email address for the contact person"""
  email: String
  """Number of employees"""
  employees: Int
  """The entity this lead belongs to"""
  entityId: ID
  """First name of the contact person"""
  firstName: String
  """Group that the lead belongs to"""
  groupId: ID
  """Industry of the lead"""
  industryId: ID
  """Remote IP address of the lead"""
  ipAddress: String
  """Last name of the contact person"""
  lastName: String
  """Source of the lead"""
  leadSourceId: ID
  """Status of the lead"""
  leadStatusId: ID
  """Link to the contact's LinkedIn profile"""
  linkedinUrl: String
  """Mobile number for the contact person"""
  mobile: String
  """Owner of the lead"""
  ownerUserId: ID
  """Phone number for the contact person"""
  phone: String
  """Annual revenue of the lead"""
  revenue: Int
  """State of the lead"""
  state: String
  """Street address of the lead"""
  street: String
  """Job title of the contact person"""
  title: String
  """Datetime the lead was last updated"""
  updatedAt: ISO8601DateTime
  """Company website URL"""
  website: String
  """Zip/PostalCode for the lead"""
  zip: String
}

"""The connection type for Lead."""
type LeadConnection {
  """A list of edges."""
  edges: [LeadEdge]
  """A list of nodes."""
  nodes: [Lead]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of LeadConvert."""
type LeadConvertPayload {
  account: Account!
  errors: [String!]
  lead: Lead!
}

"""Autogenerated return type of LeadCreate."""
type LeadCreatePayload {
  errors: [String!]
  lead: Lead
}

"""Autogenerated return type of LeadDelete."""
type LeadDeletePayload {
  errors: [String!]
  lead: Lead
}

"""An edge in a connection."""
type LeadEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Lead
}

"""Source of the lead"""
type LeadSource {
  """Datetime the lead source was created"""
  createdAt: ISO8601DateTime!
  """Unique identifier for the lead source"""
  id: ID!
  """Name of the lead source"""
  name: String
  """Datetime the lead source was last updated"""
  updatedAt: ISO8601DateTime!
}

"""Attributes for creating and updating a lead source"""
input LeadSourceAttributes {
  """Name of the lead source"""
  name: String!
}

"""The connection type for LeadSource."""
type LeadSourceConnection {
  """A list of edges."""
  edges: [LeadSourceEdge]
  """A list of nodes."""
  nodes: [LeadSource]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of LeadSourceCreate."""
type LeadSourceCreatePayload {
  errors: [String!]
  leadSource: LeadSource
}

"""An edge in a connection."""
type LeadSourceEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: LeadSource
}

"""Status of a lead"""
type LeadStatus {
  """Datetime the lead status was created"""
  createdAt: ISO8601DateTime!
  """Unique identifier for the lead status"""
  id: ID!
  """Name of the lead status"""
  name: String!
  """Datetime the lead status was last updated"""
  updatedAt: ISO8601DateTime!
}

"""The connection type for LeadStatus."""
type LeadStatusConnection {
  """A list of edges."""
  edges: [LeadStatusEdge]
  """A list of nodes."""
  nodes: [LeadStatus]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type LeadStatusEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: LeadStatus
}

"""Autogenerated return type of LeadUpdate."""
type LeadUpdatePayload {
  errors: [String!]
  lead: Lead
}

input LegacyCreditNoteAttributes {
  accountCode: String
  accountId: ID
  amount: Float!
  baseCurrencyTotal: Float
  creditedInvoiceId: ID
  currencyId: ID!
  disputeReasonId: ID
  issuedAt: ISO8601Date
  kind: CreditNoteKind!
  number: String!
  pdfBlobUuid: ID!
  poNumber: String!
  subtotal: Float!
  taxAmount: Float!
}

"""Autogenerated return type of LegacyCreditNoteCreate."""
type LegacyCreditNoteCreatePayload {
  creditNote: CreditNote
  errors: [String!]
}

input LegacyInvoiceAttributes {
  accountCode: String
  accountId: ID
  amount: Float!
  baseCurrencyTotal: Float
  currencyId: ID!
  dueAt: ISO8601Date!
  issuedAt: ISO8601Date
  netPaymentDays: Int!
  number: String!
  pdfBlobUuid: ID!
  poNumber: String!
  state: InvoiceState!
  subtotal: Float!
  taxAmount: Float!
}

"""Autogenerated return type of LegacyInvoiceCreate."""
type LegacyInvoiceCreatePayload {
  errors: [String!]
  invoice: Invoice
}

"""Autogenerated return type of LegacyPaymentCreate."""
type LegacyPaymentCreatePayload {
  errors: [String!]
  payment: Payment
}

"""Autogenerated return type of LegacyRecurringRevenueImport."""
type LegacyRecurringRevenueImportPayload {
  errors: [String!]
}

type Macro {
  appliesTo: [String!]
  id: ID!
  name: String!
}

type Method {
  id: ID!
  name: String!
  outputs: [Output!]
}

input MobilePushAttributes {
  device: String!
  expirationTime: Int
}

"""Autogenerated return type of MobilePushSubscribe."""
type MobilePushSubscribePayload {
  errors: [String!]!
  registration: NotificationRegistration!
}

type MonthlyReport {
  columnHeaders: [String!]!
  monthlyReportCategory: [MonthlyReportCategory!]!
}

type MonthlyReportAccount {
  amounts: [String!]!
  title: String!
}

type MonthlyReportCategory {
  monthlyReportAccounts: [MonthlyReportAccount!]!
  title: String!
}

type Mutation {
  """Create an account [REQUIRED_SCOPES:standard:write]"""
  accountCreate(attributes: AccountAttributes!): AccountCreatePayload
  """Delete an account [REQUIRED_SCOPES:standard:write]"""
  accountDelete(id: ID!): AccountDeletePayload
  """Reset account data [REQUIRED_SCOPES:owner:write]"""
  accountReset(confirm: Boolean, deleteAccounts: Boolean, deleteContacts: Boolean, deleteLeads: Boolean, deleteProducts: Boolean): AccountResetPayload
  """
  Using an existing account, sign up and pay for a subscription. [REQUIRED_SCOPES:standard:write]
  """
  accountSignup(accountId: ID!, entityId: ID!, paymentMethodId: String, pluginId: String!, priceListCode: String!, quoteId: ID!): AccountSignupPayload
  """Update an account [REQUIRED_SCOPES:standard:write]"""
  accountUpdate(attributes: AccountAttributes!, id: ID!): AccountUpdatePayload
  """
  Replaces an account address with a validated address [REQUIRED_SCOPES:standard:write]
  """
  accountValidateAddress(id: ID!): AccountValidateAddressPayload
  """Generate an api access token [REQUIRED_SCOPES:security:write]"""
  apiAccessTokenCreate(id: ID!): ApiAccessTokenCreatePayload
  """
  Create an OAuth2.0 API application for generating API access tokens [REQUIRED_SCOPES:security:write]
  """
  apiClientCreate(attributes: ApiClientAttributes!): ApiClientCreatePayload
  """Delete an OAuth2.0 API application [REQUIRED_SCOPES:security:write]"""
  apiClientDelete(id: ID!): ApiClientDeletePayload
  """Generate a new client secret [REQUIRED_SCOPES:security:write]"""
  apiClientSecretRenew(id: ID!): ApiClientSecretRenewPayload
  """Update an OAuth2.0 API application [REQUIRED_SCOPES:security:write]"""
  apiClientUpdate(attributes: ApiClientAttributes!, id: ID!): ApiClientUpdatePayload
  """Create an approval rule [REQUIRED_SCOPES:security:write]"""
  approvalRuleCreate(attributes: ApprovalRuleAttributes!): ApprovalRuleCreatePayload
  """Delete an approval rule [REQUIRED_SCOPES:security:write]"""
  approvalRuleDelete(id: ID!): ApprovalRuleDeletePayload
  """Update an approval rule [REQUIRED_SCOPES:security:write]"""
  approvalRuleUpdate(attributes: ApprovalRuleAttributes!, id: ID!): ApprovalRuleUpdatePayload
  """Create an approver [REQUIRED_SCOPES:security:write]"""
  approverCreate(attributes: ApproverAttributes!): ApproverCreatePayload
  """Delete an approver [REQUIRED_SCOPES:security:write]"""
  approverDelete(id: ID!): ApproverDeletePayload
  """Update an approver [REQUIRED_SCOPES:security:write]"""
  approverUpdate(attributes: ApproverAttributes!, id: ID!): ApproverUpdatePayload
  """
  Update the billing details for an account [REQUIRED_SCOPES:billing:write]
  """
  billingDetailsUpdate(attributes: BillingDetailsAttributes!, id: ID): BillingDetailsUpdatePayload
  """Create a campaign [REQUIRED_SCOPES:standard:write]"""
  campaignCreate(attributes: CampaignAttributes!): CampaignCreatePayload
  """Delete a campaign [REQUIRED_SCOPES:standard:write]"""
  campaignDelete(id: ID!): CampaignDeletePayload
  """Update a campaign [REQUIRED_SCOPES:standard:write]"""
  campaignUpdate(attributes: CampaignAttributes!, id: ID!): CampaignUpdatePayload
  """Pay a Quote or an Invoice [REQUIRED_SCOPES:standard:write]"""
  checkout(invoiceId: ID, payableId: ID, paymentMethodData: CheckoutPaymentMethodAttributes, paymentMethodId: ID, quoteId: ID): CheckoutPayload
  """Update company details [REQUIRED_SCOPES:admin:write]"""
  companyUpdate(attributes: CompanyAttributes!): CompanyUpdatePayload
  """Create a contact [REQUIRED_SCOPES:standard:write]"""
  contactCreate(attributes: ContactAttributes!): ContactCreatePayload
  """Delete a contact [REQUIRED_SCOPES:standard:write]"""
  contactDelete(code: String, id: ID): ContactDeletePayload
  """Update a contact [REQUIRED_SCOPES:standard:write]"""
  contactUpdate(attributes: ContactAttributes!, code: String, id: ID): ContactUpdatePayload
  """Create a coupon [REQUIRED_SCOPES:product:write]"""
  couponCreate(accountId: ID, attributes: CouponAttributes!, planId: ID): CouponCreatePayload
  """Delete a coupon [REQUIRED_SCOPES:product:write]"""
  couponDelete(id: ID!): CouponDeletePayload
  """Update a coupon [REQUIRED_SCOPES:product:write]"""
  couponUpdate(attributes: CouponAttributes!, id: ID!): CouponUpdatePayload
  """Apply a credit note to invoices [REQUIRED_SCOPES:billing:write]"""
  creditNoteApplyToInvoices(creditNoteId: ID!, invoiceIds: [ID!]!): CreditNoteApplyToInvoicesPayload
  """Create a credit note [REQUIRED_SCOPES:billing:write]"""
  creditNoteCreate(disputeReasonId: ID, invoiceId: ID!, kind: CreditNoteKind): CreditNoteCreatePayload
  """Delete a credit note [REQUIRED_SCOPES:billing:write]"""
  creditNoteDelete(id: ID!): CreditNoteDeletePayload
  """Issue a credit note [REQUIRED_SCOPES:billing:write]"""
  creditNoteIssue(
    """ID of the credit note to issue"""
    id: ID!
  ): CreditNoteIssuePayload
  """Update a credit note [REQUIRED_SCOPES:billing:write]"""
  creditNoteUpdate(attributes: CreditNoteAttributes!, id: ID!): CreditNoteUpdatePayload
  """Update a credit note taxes [REQUIRED_SCOPES:billing:write]"""
  creditNoteUpdateTaxes(id: ID!): CreditNoteUpdateTaxesPayload
  """Create a currency [REQUIRED_SCOPES:billing:write]"""
  currencyCreate(attributes: CurrencyAttributes!): CurrencyCreatePayload
  """Update a currency [REQUIRED_SCOPES:billing:write]"""
  currencyUpdate(attributes: CurrencyAttributes!, id: ID!): CurrencyUpdatePayload
  """
  Update the profile of the current user [REQUIRED_SCOPES:standard:write]
  """
  currentUserUpdate(attributes: CurrentUserAttributes!): CurrentUserUpdatePayload
  """Create a deal [REQUIRED_SCOPES:standard:write]"""
  dealCreate(attributes: DealAttributes!): DealCreatePayload
  """Delete a deal [REQUIRED_SCOPES:standard:write]"""
  dealDelete(id: ID!): DealDeletePayload
  """Create a deal stage [REQUIRED_SCOPES:admin:write]"""
  dealStageCreate(attributes: DealStageAttributes!): DealStageCreatePayload
  """Delete a deal stage [REQUIRED_SCOPES:admin:write]"""
  dealStageDelete(id: ID!): DealStageDeletePayload
  """Update a deal stage [REQUIRED_SCOPES:admin:write]"""
  dealStageUpdate(attributes: DealStageAttributes!, id: ID!): DealStageUpdatePayload
  """Update a deal [REQUIRED_SCOPES:standard:write]"""
  dealUpdate(attributes: DealAttributes!, id: ID!): DealUpdatePayload
  """
  Add or recreate demo data in the warren.                                                                                 This process happens in the background                                                                                 and could take approximately 1 minute [REQUIRED_SCOPES:standard:write]
  """
  demoDataCreate: DemoDataCreatePayload
  """Remove demo data from the warren [REQUIRED_SCOPES:standard:write]"""
  demoDataDelete: DemoDataDeletePayload
  """Create a dispute reason [REQUIRED_SCOPES:billing:write]"""
  disputeReasonCreate(attributes: DisputeReasonAttributes!): DisputeReasonCreatePayload
  """Delete a dispute reason [REQUIRED_SCOPES:billing:write]"""
  disputeReasonDelete(id: ID!): DisputeReasonDeletePayload
  """Update a dispute reason [REQUIRED_SCOPES:billing:write]"""
  disputeReasonUpdate(attributes: DisputeReasonAttributes!, id: ID!): DisputeReasonUpdatePayload
  """Reset email branding [REQUIRED_SCOPES:admin:write]"""
  emailBrandingReset: EmailBrandingResetPayload
  """Retry sending an email [REQUIRED_SCOPES:standard:write]"""
  emailRetry(uuid: String!): EmailRetryPayload
  """Create an entity [REQUIRED_SCOPES:admin:write]"""
  entityCreate(attributes: EntityAttributes!): EntityCreatePayload
  """ [REQUIRED_SCOPES:admin:write]"""
  entityDelete(id: ID!): EntityDeletePayload
  """Create a duplicate of an entity [REQUIRED_SCOPES:admin:write]"""
  entityDuplicate(id: ID!): EntityDuplicatePayload
  """Update an entity [REQUIRED_SCOPES:admin:write]"""
  entityUpdate(attributes: EntityAttributes!, id: ID!): EntityUpdatePayload
  """
  Replaces a company address with a validated address [REQUIRED_SCOPES:admin:write]
  """
  entityValidateAddress(entityId: ID!): EntityValidateAddressPayload
  """Create a feature [REQUIRED_SCOPES:product:write]"""
  featureCreate(attributes: FeatureAttributes!, productId: ID!): FeatureCreatePayload
  """Delete a feature [REQUIRED_SCOPES:product:write]"""
  featureDelete(id: ID!): FeatureDeletePayload
  """Update a feature [REQUIRED_SCOPES:product:write]"""
  featureUpdate(attributes: FeatureAttributes!, id: ID!): FeatureUpdatePayload
  """
  Create a feature usage record for usage based billing [REQUIRED_SCOPES:billing:write]
  """
  featureUsageCreate(attributes: FeatureUsageAttributes!): FeatureUsageCreatePayload
  """Delete a feature usage record [REQUIRED_SCOPES:billing:write]"""
  featureUsageDelete(id: ID!): FeatureUsageDeletePayload
  """
  Update a feature usage record for usage based billing [REQUIRED_SCOPES:billing:write]
  """
  featureUsageUpdate(attributes: FeatureUsageAttributes!, id: ID!): FeatureUsageUpdatePayload
  """Create a field [REQUIRED_SCOPES:standard:write]"""
  fieldCreate(attributes: FieldAttributes!): FieldCreatePayload
  """Delete a field [REQUIRED_SCOPES:standard:write]"""
  fieldDelete(id: ID!): LeadDeletePayload
  """Update a field [REQUIRED_SCOPES:standard:write]"""
  fieldUpdate(attributes: FieldAttributes!, id: ID!): FieldUpdatePayload
  """Create a financial account [REQUIRED_SCOPES:billing:write]"""
  financialAccountCreate(attributes: FinancialAccountAttributes!): FinancialAccountCreatePayload
  """Delete a financial account [REQUIRED_SCOPES:billing:write]"""
  financialAccountDelete(id: ID!): FinancialAccountDeletePayload
  """Update a financial account [REQUIRED_SCOPES:billing:write]"""
  financialAccountUpdate(attributes: FinancialAccountAttributes!, id: ID!): FinancialAccountUpdatePayload
  """Create a group [REQUIRED_SCOPES:security:write]"""
  groupCreate(attributes: GroupAttributes!): GroupCreatePayload
  """Delete a group [REQUIRED_SCOPES:security:write]"""
  groupDelete(id: ID!): GroupDeletePayload
  """Update a group [REQUIRED_SCOPES:security:write]"""
  groupUpdate(attributes: GroupAttributes!, id: ID!): GroupUpdatePayload
  """Create an industry [REQUIRED_SCOPES:admin:write]"""
  industryCreate(attributes: IndustryAttributes!): IndustryCreatePayload
  """Add a credit to an invoice [REQUIRED_SCOPES:billing:write]"""
  invoiceAddCredit(amount: Float!, id: ID!): InvoiceAddCreditPayload
  """Credit an invoice [REQUIRED_SCOPES:billing:write]"""
  invoiceCredit(disputeReasonId: ID, invoiceId: ID!): InvoiceCreditPayload
  """Delete a credit from an invoice [REQUIRED_SCOPES:billing:write]"""
  invoiceDeleteCredit(id: ID!): InvoiceDeleteCreditPayload
  """
  Generate an invoice for the next billing period [REQUIRED_SCOPES:billing:write]
  """
  invoiceGenerateNextPeriod(accountId: ID, billUsageCharges: Boolean): InvoiceGenerateNextPeriodPayload
  """Refund an invoice [REQUIRED_SCOPES:billing:write]"""
  invoiceRefund(disputeReasonId: ID, invoiceId: ID!): InvoiceRefundPayload
  """Regenerate an invoice [REQUIRED_SCOPES:billing:write]"""
  invoiceRegenerate(id: ID!): InvoiceRegeneratePayload
  """Reissue a void invoice [REQUIRED_SCOPES:billing:write]"""
  invoiceReissue(id: ID!): InvoiceReissuePayload
  """
  Transition a draft invoice to ready state [REQUIRED_SCOPES:standard:write]
  """
  invoiceRelease(id: ID!): InvoiceReleasePayload
  """Try to calculate an invoice taxes [REQUIRED_SCOPES:billing:write]"""
  invoiceRetryTax(id: ID!): InvoiceRetryTaxPayload
  """Send an invoice through email [REQUIRED_SCOPES:billing:write]"""
  invoiceSendEmail(contactId: ID, id: ID!): InvoiceSendEmailPayload
  """Create an invoice template [REQUIRED_SCOPES:billing:write]"""
  invoiceTemplateCreate(attributes: InvoiceTemplateAttributes!): InvoiceTemplateCreatePayload
  """Delete an invoice template [REQUIRED_SCOPES:billing:write]"""
  invoiceTemplateDelete(id: ID!): InvoiceTemplateDeletePayload
  """Update an invoice template [REQUIRED_SCOPES:billing:write]"""
  invoiceTemplateUpdate(attributes: InvoiceTemplateAttributes!, id: ID!): InvoiceTemplateUpdatePayload
  """Update an invoice [REQUIRED_SCOPES:billing:write]"""
  invoiceUpdate(attributes: InvoiceAttributes!, id: ID!): InvoiceUpdatePayload
  """Edit a credit on an invoice [REQUIRED_SCOPES:billing:write]"""
  invoiceUpdateCredit(amount: Float!, id: ID!): InvoiceUpdateCreditPayload
  """Edit credits on an invoice [REQUIRED_SCOPES:billing:write]"""
  invoiceUpdateCredits(attributes: InvoiceUpdateCreditsAttributes!, id: ID!): InvoiceUpdateCreditsPayload
  """Update an invoice taxes [REQUIRED_SCOPES:billing:write]"""
  invoiceUpdateTaxes(id: ID!): InvoiceUpdateTaxesPayload
  """Void an invoice [REQUIRED_SCOPES:billing:write]"""
  invoiceVoid(id: ID!): InvoiceVoidPayload
  """Write off an invoice [REQUIRED_SCOPES:billing:write]"""
  invoiceWriteOff(disputeReasonId: ID, invoiceId: ID!): InvoiceWriteOffPayload
  """Convert a lead to an account [REQUIRED_SCOPES:standard:write]"""
  leadConvert(id: ID!): LeadConvertPayload
  """Create a lead [REQUIRED_SCOPES:standard:write]"""
  leadCreate(attributes: LeadAttributes!): LeadCreatePayload
  """Delete a lead [REQUIRED_SCOPES:standard:write]"""
  leadDelete(id: ID!): LeadDeletePayload
  """Create a lead source [REQUIRED_SCOPES:admin:write]"""
  leadSourceCreate(attributes: LeadSourceAttributes!): LeadSourceCreatePayload
  """Update a lead [REQUIRED_SCOPES:standard:write]"""
  leadUpdate(attributes: LeadAttributes!, id: ID!): LeadUpdatePayload
  """Create a legacy credit note [REQUIRED_SCOPES:billing:write]"""
  legacyCreditNoteCreate(attributes: LegacyCreditNoteAttributes!): LegacyCreditNoteCreatePayload
  """Create a legacy invoice [REQUIRED_SCOPES:billing:write]"""
  legacyInvoiceCreate(attributes: LegacyInvoiceAttributes!): LegacyInvoiceCreatePayload
  """Create a legacy payment [REQUIRED_SCOPES:billing:write]"""
  legacyPaymentCreate(attributes: PaymentAttributes!, invoiceIds: [ID!]!): LegacyPaymentCreatePayload
  """
  Import legacy recurring revenues from a CSV source [REQUIRED_SCOPES:admin:write]
  """
  legacyRecurringRevenueImport(source: String!): LegacyRecurringRevenueImportPayload
  """ [REQUIRED_SCOPES:standard:write]"""
  mobilePushSubscribe(attributes: MobilePushAttributes!): MobilePushSubscribePayload
  """Process mutations in bulks [REQUIRED_SCOPES:standard:write]"""
  mutationBatch(attributes: [BatchMutationAttributes!]): MutationBatchPayload
  """Apply a payment to an account [REQUIRED_SCOPES:billing:write]"""
  paymentApplyToAccount(accountId: ID, paymentId: ID!): PaymentApplyToAccountPayload
  """Apply a payment to an invoice [REQUIRED_SCOPES:billing:write]"""
  paymentApplyToInvoice(invoiceId: ID!, paymentId: ID!): PaymentApplyToInvoicePayload
  """
  Apply a payment to one or more invoices [REQUIRED_SCOPES:billing:write]
  """
  paymentApplyToInvoices(invoiceIds: [ID!]!, paymentId: ID!): PaymentApplyToInvoicesPayload
  """Remove a payment from an invoice [REQUIRED_SCOPES:billing:write]"""
  paymentUnapplyFromInvoices(invoiceIds: [ID!]!, paymentId: ID!): PaymentUnapplyFromInvoicesPayload
  """Create a plan [REQUIRED_SCOPES:product:write]"""
  planCreate(attributes: PlanAttributes!): PlanCreatePayload
  """Delete a plan [REQUIRED_SCOPES:product:write]"""
  planDelete(id: ID!): PlanDeletePayload
  """Create a duplicate of a plan [REQUIRED_SCOPES:product:write]"""
  planDuplicate(id: ID!): PlanDuplicatePayload
  """Update a plan feature [REQUIRED_SCOPES:product:write]"""
  planFeatureUpdate(attributes: PlanFeatureAttributes!, id: ID!): PlanFeatureUpdatePayload
  """Update a plan [REQUIRED_SCOPES:product:write]"""
  planUpdate(
    attributes: PlanAttributes!
    id: ID!
    """
    Make sure to send the complete list of plan features, missing ones will get removed
    """
    planFeatures: [PlanFeatureAttributes!]
  ): PlanUpdatePayload
  """Create a platform [REQUIRED_SCOPES:product:write]"""
  platformCreate(attributes: PlatformAttributes!): PlatformCreatePayload
  """Delete a platform [REQUIRED_SCOPES:product:write]"""
  platformDelete(id: ID!): PlatformDeletePayload
  """Update a platform [REQUIRED_SCOPES:product:write]"""
  platformUpdate(attributes: PlatformAttributes!, id: ID!): PlatformUpdatePayload
  """ [REQUIRED_SCOPES:admin:write]"""
  pluginCreate(attributes: PluginAttributes!): PluginCreatePayload
  """ [REQUIRED_SCOPES:legendary:write]"""
  pluginDefinitionCreate(attributes: PluginDefinitionAttributes!): PluginDefinitionCreatePayload
  """ [REQUIRED_SCOPES:legendary:write]"""
  pluginDefinitionDelete(id: ID!): PluginDefinitionDeletePayload
  """ [REQUIRED_SCOPES:legendary:write]"""
  pluginDefinitionUpdate(attributes: PluginDefinitionAttributes!, id: ID!): PluginDefinitionUpdatePayload
  """ [REQUIRED_SCOPES:admin:write]"""
  pluginDelete(guid: String, id: ID): PluginDeletePayload
  """ [REQUIRED_SCOPES:legendary:write]"""
  pluginParameterCreate(attributes: PluginParameterAttributes!): PluginParameterCreatePayload
  """ [REQUIRED_SCOPES:legendary:write]"""
  pluginParameterDelete(id: ID!): PluginParameterDeletePayload
  """ [REQUIRED_SCOPES:legendary:write]"""
  pluginParameterUpdate(attributes: PluginParameterAttributes!, id: ID!): PluginParameterUpdatePayload
  """ [REQUIRED_SCOPES:admin:write]"""
  pluginUpdate(attributes: PluginAttributes!, id: ID!): PluginUpdatePayload
  """ [REQUIRED_SCOPES:admin:write]"""
  pluginValueCreate(attributes: PluginValueAttributes!): PluginValueCreatePayload
  """ [REQUIRED_SCOPES:admin:write]"""
  pluginValueDelete(id: ID!): PluginValueDeletePayload
  """ [REQUIRED_SCOPES:admin:write]"""
  pluginValueUpdate(attributes: PluginValueAttributes!, id: ID!): PluginValueUpdatePayload
  """ [REQUIRED_SCOPES:legendary:write]"""
  pluginVendorCreate(attributes: PluginVendorAttributes!): PluginVendorCreatePayload
  """ [REQUIRED_SCOPES:legendary:write]"""
  pluginVendorDelete(id: ID!): PluginVendorDeletePayload
  """ [REQUIRED_SCOPES:legendary:write]"""
  pluginVendorUpdate(attributes: PluginVendorAttributes!, id: ID!): PluginVendorUpdatePayload
  """
  Generate a short lived access token to access the customer portal [REQUIRED_SCOPES:security:write]
  """
  portalSessionCreate(
    """Token expiry in hours. 24 hours max"""
    expiry: Int
    """When supplied a link to return to the SaaS platform"""
    returnUrl: String
    tenantCode: String!
  ): PortalSessionCreatePayload
  """Create a charge on a price list [REQUIRED_SCOPES:product:write]"""
  priceListChargeCreate(attributes: PriceListChargeAttributes!): PriceListChargeCreatePayload
  """Delete a charge from a price list [REQUIRED_SCOPES:product:write]"""
  priceListChargeDelete(id: ID!): PriceListChargeDeletePayload
  """Update a charge on a price list [REQUIRED_SCOPES:product:write]"""
  priceListChargeUpdate(attributes: PriceListChargeAttributes!, id: ID!): PriceListChargeUpdatePayload
  """Create a price list [REQUIRED_SCOPES:product:write]"""
  priceListCreate(attributes: PriceListAttributes!): PriceListCreatePayload
  """Delete a price list [REQUIRED_SCOPES:product:write]"""
  priceListDelete(id: ID!): PriceListDeletePayload
  """Create a duplicate of a price list [REQUIRED_SCOPES:product:write]"""
  priceListDuplicate(id: ID!): PriceListDuplicatePayload
  """Update a price list [REQUIRED_SCOPES:product:write]"""
  priceListUpdate(attributes: PriceListAttributes!, id: ID!): PriceListUpdatePayload
  """Create a product category [REQUIRED_SCOPES:product:write]"""
  productCategoryCreate(attributes: ProductCategoryAttributes!): ProductCategoryCreatePayload
  """Delete a product category [REQUIRED_SCOPES:product:write]"""
  productCategoryDelete(id: ID!): ProductCategoryDeletePayload
  """Update a product category [REQUIRED_SCOPES:product:write]"""
  productCategoryUpdate(attributes: ProductCategoryAttributes!, id: ID!): ProductCategoryUpdatePayload
  """Create a product [REQUIRED_SCOPES:product:write]"""
  productCreate(attributes: ProductAttributes!): ProductCreatePayload
  """Delete a product [REQUIRED_SCOPES:product:write]"""
  productDelete(id: ID!): ProductDeletePayload
  """Create a duplicate of a product [REQUIRED_SCOPES:product:write]"""
  productDuplicate(id: ID!): ProductDuplicatePayload
  """
  Create products in bulk from a JSON recipe [REQUIRED_SCOPES:product:write]
  """
  productImport(attributes: JSON!): ProductImportPayload
  """Update a product [REQUIRED_SCOPES:product:write]"""
  productUpdate(attributes: ProductAttributes!, id: ID!): ProductUpdatePayload
  """
  Trigger a fake provisioning workflow to send a test webhook request [REQUIRED_SCOPES:workflow:write]
  """
  provisioningWorkflowTest(platformId: ID!): ProvisioningWorkflowTestPayload
  """Flag a quote as accepted [REQUIRED_SCOPES:standard:write]"""
  quoteAccept(name: String!, poNumber: String, quoteId: ID, taxNumber: String, title: String!): QuoteAcceptPayload
  """
  Create an account and get a quote amount for a subscription. [REQUIRED_SCOPES:standard:write]
  """
  quoteAccountSignup(accountName: String!, billingContact: ContactAttributes!, entityId: ID!, priceListCode: String!, quantity: Int): QuoteAccountSignupPayload
  """Add a coupon to a Quote [REQUIRED_SCOPES:standard:write]"""
  quoteAddCoupon(couponCode: String!, quoteId: ID!): QuoteAddCouponPayload
  """Convert the quote to a subscription [REQUIRED_SCOPES:admin:write]"""
  quoteApplyChanges(
    persist: Boolean
    quoteId: ID!
    """
    Whether this operation must recalculate taxes or not. Requires an enabled taxation plugin
    """
    taxes: Boolean
  ): QuoteApplyChangesPayload
  """
  Cancel the approval process and remove the pending approval request [REQUIRED_SCOPES:standard:write]
  """
  quoteApprovalCancel(id: ID!): QuoteApprovalCancelPayload
  """Begin with the approval process [REQUIRED_SCOPES:standard:write]"""
  quoteApprovalStart(id: ID!): QuoteApprovalStartPayload
  """Approve a quote [REQUIRED_SCOPES:standard:write]"""
  quoteApprove(id: ID!, notes: String): QuoteApprovePayload
  """Create a quote change [REQUIRED_SCOPES:standard:write]"""
  quoteChangeAdd(priceListId: ID!, priceOverride: Boolean, quoteId: ID!, trial: Boolean): QuoteChangeCreatePayload
  """
  Add a price list with its charges and quantities to the quote [REQUIRED_SCOPES:standard:write]
  """
  quoteChangeCreate(priceListId: ID!, priceOverride: Boolean, quoteId: ID!, trial: Boolean): QuoteChangeCreatePayload
  """
  Add a price list and configure the ramp up of the charges [REQUIRED_SCOPES:standard:write]
  """
  quoteChangeCreateRampUp(charges: [QuoteChargeAttributes!], priceListId: ID!, quoteId: ID!, rampIntervalMonths: Int!): QuoteChangeCreateRampUpPayload
  """
  Add a price list and configure the ramp up of the charges [REQUIRED_SCOPES:standard:write]
  """
  quoteChangeCreateRampUpPreview(priceListId: ID!, quoteId: ID!, rampIntervalMonths: Int): QuoteChangeCreateRampUpPreviewPayload
  """Delete a quote change [REQUIRED_SCOPES:standard:write]"""
  quoteChangeDelete(id: ID!): QuoteChangeDeletePayload
  """Create a discount for a quote charge [REQUIRED_SCOPES:standard:write]"""
  quoteChangeDiscountCreate(
    """The attributes of the discount"""
    attributes: QuoteChargeAttributes
    """The ID of the quote charge to add the discount to"""
    quoteChargeId: ID!
    quoteId: ID!
  ): QuoteChangeDiscountCreatePayload
  """Update a quote change [REQUIRED_SCOPES:standard:write]"""
  quoteChangeUpdate(charges: [QuoteChargeAttributes!], id: ID!, priceOverride: Boolean): QuoteChangeUpdatePayload
  """Modify the ramp deal configuration [REQUIRED_SCOPES:standard:write]"""
  quoteChangeUpdateRampUp(charges: [QuoteChargeAttributes!], quoteChangeId: ID!, rampIntervalMonths: Int): QuoteChangeUpdateRampUpPayload
  """Add free months to a quote charge [REQUIRED_SCOPES:standard:write]"""
  quoteChargeFreeMonthsCreate(attributes: QuoteFreeMonthsAttributes!, quoteChargeId: ID!): QuoteChargeFreeMonthsCreatePayload
  """Modify the quote charge properties [REQUIRED_SCOPES:standard:write]"""
  quoteChargeUpdate(amount: Float, discount: Float, endDate: ISO8601Date, price: Float, priceTiers: [PriceListChargeTierAttributes!], quantity: Int, quoteChargeId: ID!, startDate: ISO8601Date): QuoteChargeUpdatePayload
  """
  Create a quote for a new subscription or subscription price list change [REQUIRED_SCOPES:standard:write]
  """
  quoteCompose(accountId: ID, priceListId: ID, quantity: Int, quoteId: ID, subscriptionId: ID): QuoteComposePayload
  """Create an empty quote [REQUIRED_SCOPES:standard:write]"""
  quoteCreate(attributes: QuoteAttributes!): QuoteCreatePayload
  """Create an empty quote with a new deal [REQUIRED_SCOPES:standard:write]"""
  quoteCreateWithDeal(accountId: ID, dealAttributes: DealAttributes!, quoteAttributes: QuoteAttributes!): QuoteCreateWithDealPayload
  """Delete a quote [REQUIRED_SCOPES:standard:write]"""
  quoteDelete(id: ID!): QuoteDeletePayload
  """Create a duplicate of a quote [REQUIRED_SCOPES:standard:write]"""
  quoteDuplicate(id: ID!): QuoteDuplicatePayload
  """ [REQUIRED_SCOPES:standard:write]"""
  quotePlanPreview(
    accountId: ID
    """Whether or not to apply the quote and persist its changes"""
    apply: Boolean
    """
    If true, it will return the price without prorations, \
                                       credits or adjustments. Cannot mix with apply
    """
    basePrice: Boolean
    couponCode: String
    paymentId: ID
    priceListId: ID!
    quantity: Int
    subscriptionId: ID
    """
    Whether or not calculate charges with taxes. \
          This will depend on whether or not a tax plugin is installed, enabled and properly configured
    """
    taxes: Boolean
  ): QuotePlanPreview!
  """
  Poll for the signing url to check if it is ready [REQUIRED_SCOPES:standard:write]
  """
  quotePollSigningUrl(quoteId: ID): QuotePollSigningUrlPayload
  """
  DEPRECATED. Please use Quote Checkout instead [REQUIRED_SCOPES:standard:write]
  """
  quotePreview(
    """Required when used with Admin privileges"""
    accountId: ID
    """Whether or not to apply the quote and persist its changes"""
    apply: Boolean
    """
    If true, transitions the quote to `shared` to prevent it from receiving more changes
    """
    freeze: Boolean
    paymentId: ID
    quoteId: ID!
    """
    Whether or not calculate charges with taxes. \
          This will depend on whether or not a tax plugin is installed, enabled and properly configured
    """
    taxes: Boolean
  ): QuotePlanPreview!
  """Update a quote taxes [REQUIRED_SCOPES:standard:write]"""
  quoteRecalculateTaxes(id: ID!): QuoteRecalculateTaxesPayload
  """Reject a quote [REQUIRED_SCOPES:standard:write]"""
  quoteReject(id: ID!, notes: String): QuoteRejectPayload
  """Removes coupons from a quote [REQUIRED_SCOPES:standard:write]"""
  quoteRemoveCoupons(quoteId: ID!): QuoteRemoveCouponsPayload
  """
  Send the quote by email to the quotes contact [REQUIRED_SCOPES:standard:write]
  """
  quoteSendEmail(id: ID!): QuoteSendEmailPayload
  """Generate a signing url for a quote [REQUIRED_SCOPES:standard:write]"""
  quoteSigningUrlCreate(quoteId: ID): QuoteCreateSignUrlPayload
  """
  Generate a quote to reinstate a subscription [REQUIRED_SCOPES:standard:write]
  """
  quoteSubscriptionReinstate(ids: [ID!]!): QuoteSubscriptionReinstatePayload
  """
  Generate a quote to renew a subscription [REQUIRED_SCOPES:standard:write]
  """
  quoteSubscriptionRenew(ids: [ID!]!): QuoteSubscriptionRenewPayload
  """
  Quote changing quantities and/or discounts to subscriptions [REQUIRED_SCOPES:standard:write]
  """
  quoteSubscriptionUpdate(subscriptionIds: [ID!]!): QuoteSubscriptionUpdatePayload
  """Quote a subscription upgrade [REQUIRED_SCOPES:standard:write]"""
  quoteSubscriptionUpgrade(priceListId: ID!, subscriptionId: ID!): QuoteSubscriptionUpgradePayload
  """
  Undo the a quote after it has been applied [REQUIRED_SCOPES:standard:write]
  """
  quoteUndo(quoteId: ID!): QuoteUndoPayload
  """Unshare a quote [REQUIRED_SCOPES:standard:write]"""
  quoteUnshare(id: ID!): QuoteUnsharePayload
  """Update a quote [REQUIRED_SCOPES:standard:write]"""
  quoteUpdate(attributes: QuoteAttributes!, id: ID!): QuoteUpdatePayload
  """Create a role [REQUIRED_SCOPES:security:write]"""
  roleCreate(attributes: RoleAttributes!): RoleCreatePayload
  """Delete a role [REQUIRED_SCOPES:security:write]"""
  roleDelete(id: ID!): RoleDeletePayload
  """Update a role [REQUIRED_SCOPES:security:write]"""
  roleUpdate(attributes: RoleAttributes!, id: ID!): RoleUpdatePayload
  """
  Complete the signup for a Bunny account [REQUIRED_SCOPES:legendary:write]
  """
  signupActivate(token: String!): SignupActivatePayload
  """Sign up for a Bunny account [REQUIRED_SCOPES:legendary:write]"""
  signupCreate(attributes: SignupAttributes!): SignupCreatePayload
  """Cancel an active subscription [REQUIRED_SCOPES:standard:write]"""
  subscriptionCancel(cancellationDate: ISO8601Date, ids: [ID!]!): SubscriptionCancelPayload
  """Create a paid or trial subscription [REQUIRED_SCOPES:standard:write]"""
  subscriptionCreate(attributes: SubscriptionAttributes!, billingDay: Int): SubscriptionCreatePayload
  """Delete a subscription [REQUIRED_SCOPES:standard:write]"""
  subscriptionDelete(id: ID!): SubscriptionDeletePayload
  """
  Reinstating an expired or canceled subscription [REQUIRED_SCOPES:standard:write]
  """
  subscriptionReinstate(effectiveDate: ISO8601Date, ids: [ID!]!, paymentId: ID, taxes: Boolean): SubscriptionReinstatePayload
  """
  Toggle auto-renew ON or OFF on a subscription [REQUIRED_SCOPES:standard:write]
  """
  subscriptionSetAutoRenew(evergreen: Boolean!, ids: [ID!]!): SubscriptionSetAutoRenewPayload
  """
  Update the tenant linked to a subscription [REQUIRED_SCOPES:standard:write]
  """
  subscriptionTenantUpdate(attributes: SubscriptionTenantUpdateAttributes!, id: ID!): SubscriptionTenantUpdatePayload
  """
  Convert an existing trial subscription into a paid subscription [REQUIRED_SCOPES:standard:write]
  """
  subscriptionTrialConvert(paymentId: ID, subscriptionId: ID!): SubscriptionTrialConvertPayload
  """
  Preview of a existing trial subscription conversion [REQUIRED_SCOPES:standard:write]
  """
  subscriptionTrialConvertPreview(subscriptionId: ID!): SubscriptionTrialConvertPreviewPayload
  """
  Extend the subscription's trial period [REQUIRED_SCOPES:standard:write]
  """
  subscriptionTrialExtend(id: ID!, trialEndDate: ISO8601Date!): SubscriptionTrialExtendPayload
  """
  Quote quantity and/or discount modifications to a subscription [REQUIRED_SCOPES:standard:write]
  """
  subscriptionUpdate(attributes: SubscriptionAttributes!, id: ID!): SubscriptionUpdatePayload
  """Update an email template [REQUIRED_SCOPES:admin:write]"""
  templateUpdate(attributes: TemplateAttributes!, id: ID!): TemplateUpdatePayload
  """
  Create an tenant in Bunny to reference a tenant in your SaaS application [REQUIRED_SCOPES:product:write]
  """
  tenantCreate(attributes: TenantAttributes!, subscriptionId: ID): TenantCreatePayload
  """Delete a tenant [REQUIRED_SCOPES:product:write]"""
  tenantDelete(id: ID!): TenantDeletePayload
  """Updates the metrics for a tenant [REQUIRED_SCOPES:platform:write]"""
  tenantMetricsUpdate(attributes: TenantMetricsAttributes!, code: String!): TenantMetricsUpdatePayload
  """
  Change the provisioning state to trigger a provisioning workflow [REQUIRED_SCOPES:standard:write]
  """
  tenantProvisioningChangeUpdate(attributes: TenantProvisioningChangeAttributes!, id: ID!): TenantProvisioningChangeUpdatePayload
  """Update an tenant [REQUIRED_SCOPES:product:write]"""
  tenantUpdate(attributes: TenantAttributes!, id: ID!): TenantUpdatePayload
  """Create a user [REQUIRED_SCOPES:security:write]"""
  userCreate(attributes: UserAttributes!): UserCreatePayload
  """Delete a user [REQUIRED_SCOPES:security:write]"""
  userDelete(id: ID!): UserDeletePayload
  """Update a user [REQUIRED_SCOPES:security:write]"""
  userUpdate(attributes: UserAttributes!, id: ID!): UserUpdatePayload
  """Create a view [REQUIRED_SCOPES:standard:write]"""
  viewCreate(attributes: ViewAttributes!): ViewCreatePayload
  """Delete a view [REQUIRED_SCOPES:standard:write]"""
  viewDelete(id: ID!): ViewDeletePayload
  """Update a view [REQUIRED_SCOPES:standard:write]"""
  viewUpdate(attributes: ViewAttributes!, id: ID!): ViewUpdatePayload
  """ [REQUIRED_SCOPES:legendary:write]"""
  warrenProvision(attributes: WarrenAttributes!, tenantCode: String!): WarrenProvisionPayload
  """ [REQUIRED_SCOPES:standard:write]"""
  webPushSubscribe(attributes: WebPushAttributes!): WebPushSubscribePayload
  """Retry sending a webhook event [REQUIRED_SCOPES:workflow:write]"""
  webhookEventRetry(id: ID!): WebhookEventRetryPayload
  """
  Generate a short lived access token to manage your subscription with bunny [REQUIRED_SCOPES:admin:write]
  """
  widgetTokenCreate: WidgetTokenCreatePayload
  """Create a workflow category [REQUIRED_SCOPES:workflow:write]"""
  workflowCategoryCreate(attributes: WorkflowCategoryAttributes!): WorkflowCategoryCreatePayload
  """Delete a workflow category [REQUIRED_SCOPES:workflow:write]"""
  workflowCategoryDelete(id: ID!): WorkflowCategoryDeletePayload
  """Update a workflow category [REQUIRED_SCOPES:workflow:write]"""
  workflowCategoryUpdate(attributes: WorkflowCategoryAttributes!, id: ID!): WorkflowCategoryUpdatePayload
  """Create a workflow [REQUIRED_SCOPES:workflow:write]"""
  workflowCreate(attributes: WorkflowAttributes!): WorkflowCreatePayload
  """Delete a workflow [REQUIRED_SCOPES:workflow:write]"""
  workflowDelete(id: ID!): WorkflowDeletePayload
  """Create a duplicate of a workflow [REQUIRED_SCOPES:workflow:write]"""
  workflowDuplicate(id: ID!): WorkflowDuplicatePayload
  """Update a workflow [REQUIRED_SCOPES:workflow:write]"""
  workflowUpdate(attributes: WorkflowAttributes!, id: ID!): WorkflowUpdatePayload
  """
  Create/restore all of the default workflows [REQUIRED_SCOPES:workflow:write]
  """
  workflowsDefaultCreate: WorkflowsDefaultCreatePayload
}

"""Autogenerated return type of MutationBatch."""
type MutationBatchPayload {
  batch: [BatchMutation!]
  errors: [String!]
}

type Notification {
  action: String!
  createdAt: ISO8601DateTime!
  description: String!
  id: ID!
  recipientUserId: ID
  seenAt: ISO8601DateTime
}

"""The connection type for Notification."""
type NotificationConnection {
  """A list of edges."""
  edges: [NotificationEdge]
  """A list of nodes."""
  nodes: [Notification]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type NotificationEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Notification
}

type NotificationRegistration {
  authKey: String
  createdAt: ISO8601DateTime!
  deviceIdentificator: String
  endpoint: String
  id: ID!
  pdhKey: String
  pushType: NotificationRegistrationPush!
  updatedAt: ISO8601DateTime
}

enum NotificationRegistrationPush {
  """Mobile Push notification"""
  MOBILE
  """Web Push notification"""
  WEB
}

type Obj {
  attachments: [Attachment!]
  computed: Boolean
  fields: [Field!]
  kind: [FieldKind!]!
  macros: [Macro!]
  methods: [Method!]
  name: String!
  nestedFields: [Field!]
  recipients: [EmailRecipient!]
  relatedObjects: [RelatedObject!]
  uses: [String!]!
}

type Output {
  id: ID!
  kind: FieldKind!
  name: String!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Account paying status"""
enum PayingStatus {
  """Free"""
  CHURNED_FROM_FREE
  """Free"""
  CHURNED_FROM_PAYING
  """Free"""
  FREE
  """Free"""
  NOT_PAYING
  """Free"""
  PAYING
  """Trial"""
  TRIAL
}

type Payment {
  account: Account
  accountId: ID
  amount: Float!
  amountUnapplied: Float
  appliedToInvoices(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): InvoiceConnection
  baseCurrencyCash: Float
  baseCurrencyId: ID
  createdAt: ISO8601DateTime!
  currencyId: ID
  description: String!
  id: ID!
  isLegacy: Boolean
  memo: String!
  receivedAt: ISO8601DateTime!
  state: PaymentState!
  transactionRecord: Transaction
  updatedAt: ISO8601DateTime!
}

type PaymentApplication {
  account: Account
  amount: Float
  createdAt: ISO8601DateTime
  currencyId: ID
  id: ID!
  invoice: Invoice
  invoiceId: ID
  memo: String
  paymentId: ID
  paymentType: String
  updatedAt: ISO8601DateTime
}

"""The connection type for PaymentApplication."""
type PaymentApplicationConnection {
  """A list of edges."""
  edges: [PaymentApplicationEdge]
  """A list of nodes."""
  nodes: [PaymentApplication]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type PaymentApplicationEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: PaymentApplication
}

"""Autogenerated return type of PaymentApplyToAccount."""
type PaymentApplyToAccountPayload {
  errors: [String!]
  payment: Payment
}

"""Autogenerated return type of PaymentApplyToInvoice."""
type PaymentApplyToInvoicePayload {
  errors: [String!]
  invoice: Invoice
  payment: Payment
}

"""Autogenerated return type of PaymentApplyToInvoices."""
type PaymentApplyToInvoicesPayload {
  errors: [String!]
  paidInvoices: [Invoice!]
  payment: Payment
  paymentApplications: [PaymentApplication!]
  removedInvoices: [Invoice!]
}

input PaymentAttributes {
  """The id of the account that the payment is associated with"""
  accountId: ID
  """The amount of the payment"""
  amount: Float!
  """The currency of the payment"""
  currencyId: ID!
  """The fees associated with the payment"""
  fees: Float
  """A memo or note for the payment"""
  memo: String!
  """The date the payment was received"""
  receivedAt: ISO8601DateTime!
}

"""The connection type for Payment."""
type PaymentConnection {
  """A list of edges."""
  edges: [PaymentEdge]
  """A list of nodes."""
  nodes: [Payment]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type PaymentEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Payment
}

type PaymentMethod {
  account: Account
  accountId: ID
  createdAt: ISO8601DateTime
  disabled: Boolean
  expirationDate: ISO8601Date
  failureCode: String
  id: ID!
  lastSuccess: ISO8601DateTime
  metadata: PaymentMethodMetadata
  paymentType: PaymentType
  plugin: Plugin
  pluginId: ID
  state: PaymentMethodState
  updatedAt: ISO8601DateTime
}

"""The connection type for PaymentMethod."""
type PaymentMethodConnection {
  """A list of edges."""
  edges: [PaymentMethodEdge]
  """A list of nodes."""
  nodes: [PaymentMethod]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type PaymentMethodEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: PaymentMethod
}

type PaymentMethodMetadata {
  description: String
  expiration: ISO8601Date
  icon: String
  identifier: String
  issuer: String
  kind: String
}

enum PaymentMethodState {
  """Payment method has failed during use"""
  FAILED
  """Payment method has been succesfully used"""
  SUCCESS
  """Payment method has not ben used or unknown state"""
  UNKNOWN
}

enum PaymentState {
  """Payment is applied"""
  APPLIED
  """Payment is partially applied"""
  PARTIALLY_APPLIED
  """Payment is not yet applied"""
  UNAPPLIED
}

enum PaymentType {
  """ACH payment"""
  ach
  """Credit or Debit Card payment"""
  card
  """Uncategorized payment"""
  other
  """Wire transfer payment"""
  wire
}

"""Autogenerated return type of PaymentUnapplyFromInvoices."""
type PaymentUnapplyFromInvoicesPayload {
  errors: [String!]
  invoices: [Invoice!]
  payment: Payment
}

type Period {
  closed: Boolean
  createdAt: ISO8601DateTime
  id: ID!
  month: Int
  monthName: String
  name: String
  updatedAt: ISO8601DateTime
  warrenId: Int
  year: Int
}

type PeriodAmount {
  """
  Total amount to pay for the period duration. Usage-based amounts could be null for future dates
  """
  amount: Float
  amountsByTier: [TieredAmount!]
  """Period's end date"""
  endDate: ISO8601Date!
  """Unique identifier"""
  id: ID
  """Period frequency. E.g. Monthly = Month 1, Month 2, Month 3, ..."""
  name: String
  """Proration rate for the period duration"""
  prorationRate: Float
  """Quantity for the period duration"""
  quantity: Int
  """Period's start date"""
  startDate: ISO8601Date!
}

"""The connection type for Period."""
type PeriodConnection {
  """A list of edges."""
  edges: [PeriodEdge]
  """A list of nodes."""
  nodes: [Period]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type PeriodEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Period
}

type Plan {
  """True if the plan is an add-on"""
  addon: Boolean
  """First date the plan is available for sale"""
  availableFrom: ISO8601Date!
  """Late date the plan is available for sale"""
  availableTo: ISO8601Date!
  """Returns the lowest price in all plan charges"""
  basePrice: Float
  """Unique code"""
  code: String
  """Label for the contact us button"""
  contactUsLabel: String
  """URL for the contact us button"""
  contactUsUrl: String
  """Timestamp the plan was created"""
  createdAt: ISO8601DateTime!
  """Customer-facing description of the plan"""
  description: String
  """List of features specified on this plan"""
  features: [Feature!]
  """Unique identifier for the plan"""
  id: ID!
  """Intenal notes about the plan"""
  internalNotes: String
  """Convenient boolean that shows whether the plan is available right now"""
  isAvailableNow: Boolean!
  """
  Controls whether the plan is visible for sale regardless of avilability dates
  """
  isVisible: Boolean
  """Unique plan name"""
  name: String!
  """List of features specified on this plan"""
  planFeatures: [PlanFeature!]
  """The plan's position wihtin the product"""
  position: Int
  """Price lists for this plan"""
  priceLists(filter: String): [PriceList!]!
  """Text to display on the portal for the plan's period"""
  pricingDescription: String
  """The plan's pricing style"""
  pricingStyle: PlanPricingStyles!
  product: Product
  """The ID of the product the plan belongs to"""
  productId: ID!
  productPlanName: String!
  """Allows customers to buy this plan via the portal"""
  selfServiceBuy: Boolean
  """Allows customers to cancel this plan via the portal"""
  selfServiceCancel: Boolean
  """Allows customers to renew this plan via the portal"""
  selfServiceRenew: Boolean
  """Timestamp the plan was last updated"""
  updatedAt: ISO8601DateTime!
}

"""Attributes for creating and updating a plan"""
input PlanAttributes {
  addon: Boolean
  availableFrom: ISO8601Date
  availableTo: ISO8601Date
  code: String
  """Label for the contact us button"""
  contactUsLabel: String
  """URL for the contact us button"""
  contactUsUrl: String
  description: String
  featureIds: [ID!]
  internalNotes: String
  isVisible: Boolean
  name: String
  """The plan's position wihtin the product"""
  position: Int
  pricingDescription: String
  pricingStyle: PlanPricingStyles
  productId: ID
  """Allows customers to buy this plan via the portal"""
  selfServiceBuy: Boolean
  """Allows customers to cancel this plan via the portal"""
  selfServiceCancel: Boolean
  """Allows customers to renew this plan via the portal"""
  selfServiceRenew: Boolean
}

type PlanChangeOptions {
  plans: [Plan!]
  products: [Product!]
}

"""The connection type for Plan."""
type PlanConnection {
  """A list of edges."""
  edges: [PlanEdge]
  """A list of nodes."""
  nodes: [Plan]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of PlanCreate."""
type PlanCreatePayload {
  errors: [String!]
  plan: Plan
  planFeatures: [PlanFeature!]
}

"""Autogenerated return type of PlanDelete."""
type PlanDeletePayload {
  errors: [String!]
  success: Boolean
}

"""Autogenerated return type of PlanDuplicate."""
type PlanDuplicatePayload {
  errors: [String!]!
  plan: Plan
}

"""An edge in a connection."""
type PlanEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Plan
}

type PlanFeature {
  createdAt: ISO8601DateTime!
  feature: Feature
  featureId: ID
  id: ID!
  plan: Plan
  planId: ID
  updatedAt: ISO8601DateTime!
  value: String
}

"""Attributes for creating and updating plan features"""
input PlanFeatureAttributes {
  """Feature ID. Can't modify this field once set"""
  featureId: String
  id: ID
  """Plan ID. Can't modify this field once set"""
  planId: String
  value: String
}

"""The connection type for PlanFeature."""
type PlanFeatureConnection {
  """A list of edges."""
  edges: [PlanFeatureEdge]
  """A list of nodes."""
  nodes: [PlanFeature]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type PlanFeatureEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: PlanFeature
}

"""Autogenerated return type of PlanFeatureUpdate."""
type PlanFeatureUpdatePayload {
  errors: [String!]
  planFeature: PlanFeature
}

"""Pricing styles options for creating plans"""
enum PlanPricingStyles {
  """Contact us"""
  CONTACT_US
  """Free"""
  FREE
  """Priced"""
  PRICED
}

"""Autogenerated return type of PlanUpdate."""
type PlanUpdatePayload {
  errors: [String!]
  plan: Plan
}

type Platform {
  checkoutValidationEnabled: Boolean!
  code: String
  id: ID!
  name: String!
  provisioningEnabled: Boolean!
  tenants: [Tenant!]
  webhookAuthToken: String
  webhookSigningKey: String
  webhookUrl: String
}

"""Attributes for creating and updating a platform"""
input PlatformAttributes {
  checkoutValidationEnabled: Boolean
  code: String
  name: String
  provisioningEnabled: Boolean
  webhookAuthToken: String
  webhookSigningKey: String
  webhookUrl: String
}

"""The connection type for Platform."""
type PlatformConnection {
  """A list of edges."""
  edges: [PlatformEdge]
  """A list of nodes."""
  nodes: [Platform]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of PlatformCreate."""
type PlatformCreatePayload {
  errors: [String!]
  platform: Platform
}

"""Autogenerated return type of PlatformDelete."""
type PlatformDeletePayload {
  errors: String
  platform: Platform
}

"""An edge in a connection."""
type PlatformEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Platform
}

"""Autogenerated return type of PlatformUpdate."""
type PlatformUpdatePayload {
  errors: [String!]
  platform: Platform
}

type Plugin {
  actionMenu: [PluginActionMenuItem!]
  authType: String
  classes: [String!]
  componentName: String
  description: String
  dynamicComponents: [DynamicComponent!]
  enabled: Boolean
  enabledOnlyForUser: User
  enabledOnlyForUserId: ID
  entities: [Entity!]
  entityIds: [ID!]
  entitySelectionEnabled: Boolean
  guid: String!
  helplink: String
  hidden: Boolean
  id: ID!
  logo: String
  name: String!
  pluginDefinition: PluginDefinition
  pluginDefinitionId: ID
  pluginVendor: PluginVendor
  pluginVendorId: ID
  status: PluginStatus
  summary: String
  type: PluginType!
  userIsolation: Boolean
  uuid: String!
  webhookUrl: String
}

type PluginActionMenuItem {
  label: String!
  methodName: String!
  relUrl: String
  visible: String
}

"""Attributes for creating and updating a plugin"""
input PluginAttributes {
  dynamicComponentValues: [DynamicComponentAttributes!]
  enabled: Boolean
  enabledOnlyForUserId: ID
  entityIds: [ID!]
  entitySelectionEnabled: Boolean
  guid: String
  id: ID
  pluginDefinitionId: ID
}

"""The connection type for Plugin."""
type PluginConnection {
  """A list of edges."""
  edges: [PluginEdge]
  """A list of nodes."""
  nodes: [Plugin]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of PluginCreate."""
type PluginCreatePayload {
  errors: [String!]
  plugin: Plugin
}

type PluginDefinition {
  authType: String
  canDisable: Boolean
  description: String
  helplink: String
  hidden: Boolean
  id: ID!
  logo: String
  metadata: String
  name: String!
  platformName: String
  pluginParameters: [PluginParameter!]
  pluginType: PluginType
  pluginVendor: PluginVendor
  pluginVendorId: ID
  shortName: String
  summary: String
  userIsolation: Boolean
  uuid: ID
  webhookEnabled: Boolean
}

"""Attributes for creating and updating a plugin definition"""
input PluginDefinitionAttributes {
  description: String
  hidden: Boolean
  logo: String
  metadata: String
  name: String
  pluginType: PluginType
  pluginVendorId: ID
  shortName: String
  summary: String
  userIsolation: Boolean
  uuid: ID
}

"""The connection type for PluginDefinition."""
type PluginDefinitionConnection {
  """A list of edges."""
  edges: [PluginDefinitionEdge]
  """A list of nodes."""
  nodes: [PluginDefinition]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of PluginDefinitionCreate."""
type PluginDefinitionCreatePayload {
  errors: [String!]
  pluginDefinition: PluginDefinition
}

"""Autogenerated return type of PluginDefinitionDelete."""
type PluginDefinitionDeletePayload {
  errors: String
  pluginDefinition: PluginDefinition
}

"""An edge in a connection."""
type PluginDefinitionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: PluginDefinition
}

"""Autogenerated return type of PluginDefinitionUpdate."""
type PluginDefinitionUpdatePayload {
  errors: [String!]
  pluginDefinition: PluginDefinition
}

"""Autogenerated return type of PluginDelete."""
type PluginDeletePayload {
  errors: [String!]
}

"""An edge in a connection."""
type PluginEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Plugin
}

type PluginEntity {
  entityId: ID!
  id: ID!
  pluginId: ID!
}

"""The connection type for PluginEntity."""
type PluginEntityConnection {
  """A list of edges."""
  edges: [PluginEntityEdge]
  """A list of nodes."""
  nodes: [PluginEntity]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type PluginEntityEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: PluginEntity
}

type PluginParameter {
  id: ID!
  kind: PluginParameterKind
  name: String
  pluginDefinition: PluginDefinition!
  pluginDefinitionId: ID!
  shortName: String
  uuid: ID
}

"""Attributes for creating and updating a plugin value"""
input PluginParameterAttributes {
  kind: PluginParameterKind
  name: String
  pluginDefinitionId: ID
  position: Int
  shortName: String
  tooltip: String
  uuid: ID
}

"""The connection type for PluginParameter."""
type PluginParameterConnection {
  """A list of edges."""
  edges: [PluginParameterEdge]
  """A list of nodes."""
  nodes: [PluginParameter]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of PluginParameterCreate."""
type PluginParameterCreatePayload {
  errors: [String!]
  pluginParameter: PluginParameter
}

"""Autogenerated return type of PluginParameterDelete."""
type PluginParameterDeletePayload {
  errors: String
  pluginParameter: PluginParameter
}

"""An edge in a connection."""
type PluginParameterEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: PluginParameter
}

enum PluginParameterKind {
  """Boolean parameter type"""
  BOOLEAN
  """Copy parameter type"""
  COPY
  """Number parameter type"""
  NUMBER
  """Secret parameter type"""
  SECRET
  """String parameter type"""
  STRING
}

"""Autogenerated return type of PluginParameterUpdate."""
type PluginParameterUpdatePayload {
  errors: [String!]
  pluginParameter: PluginParameter!
}

enum PluginStatus {
  """Plugin is invalid"""
  INVALID
  """Plugin is valid"""
  VALID
}

enum PluginType {
  """Email Plugins"""
  email
  """Uncategorized Plugins"""
  other
  """Payment Plugins"""
  payment
  """Signing Plugins"""
  signing
  """Taxation Plugins"""
  taxation
  """Taxation Telecom Plugins"""
  taxation_telecom
}

"""Autogenerated return type of PluginUpdate."""
type PluginUpdatePayload {
  errors: [String!]
  plugin: Plugin
}

type PluginValue {
  id: ID!
  plugin: Plugin
  pluginId: ID
  pluginParameter: PluginParameter
  pluginParameterId: ID
}

"""Attributes for creating and updating a plugin value"""
input PluginValueAttributes {
  pluginId: ID!
  pluginParameterId: ID!
  value: String!
}

"""Autogenerated return type of PluginValueCreate."""
type PluginValueCreatePayload {
  errors: [String!]
  pluginValue: PluginValue
}

"""Autogenerated return type of PluginValueDelete."""
type PluginValueDeletePayload {
  errors: String
  pluginValue: PluginValue
}

"""Autogenerated return type of PluginValueUpdate."""
type PluginValueUpdatePayload {
  errors: [String!]
  pluginValue: PluginValue
}

type PluginVendor {
  id: ID!
  name: String!
  uuid: ID!
}

"""Attributes for creating and updating a plugin vendor"""
input PluginVendorAttributes {
  name: String
  uuid: ID
}

"""The connection type for PluginVendor."""
type PluginVendorConnection {
  """A list of edges."""
  edges: [PluginVendorEdge]
  """A list of nodes."""
  nodes: [PluginVendor]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of PluginVendorCreate."""
type PluginVendorCreatePayload {
  errors: [String!]
  pluginVendor: PluginVendor
}

"""Autogenerated return type of PluginVendorDelete."""
type PluginVendorDeletePayload {
  errors: String
  pluginVendor: PluginVendor
}

"""An edge in a connection."""
type PluginVendorEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: PluginVendor
}

"""Autogenerated return type of PluginVendorUpdate."""
type PluginVendorUpdatePayload {
  errors: [String!]
  pluginVendor: PluginVendor
}

"""Autogenerated return type of PortalSessionCreate."""
type PortalSessionCreatePayload {
  errors: [String!]
  token: String
}

type PriceList {
  """The minimum amount you'll pay by using this plan"""
  basePrice: Float
  """List of charges for this plan"""
  charges: [PriceListCharge!]
  """
  Unique code of the plan. To avoid name collissions, it is a good idea to prefix with plan code
  """
  code: String
  """Timestamp of when the plan was created"""
  createdAt: ISO8601DateTime!
  """Currency object"""
  currency: Currency
  """The currency of the prices on the plan"""
  currencyId: ID!
  """Unique ID of the price list"""
  id: ID!
  """Controls whether the plan is visible for sale"""
  isVisible: Boolean
  """Name of the price list"""
  name: String!
  """Number of months per billing cycle"""
  periodMonths: Int
  """Object of the plan the price list belongs to"""
  plan: Plan
  """ID of the plan the price list belongs to"""
  planId: ID!
  """Auto-generated summary of the pricing"""
  priceDescription: String
  """Default values for a new price list charge"""
  priceListChargeDefaults: PriceListCharge
  product: Product
  """ID of the plan the product belongs to"""
  productId: ID
  """Stock keeping unit"""
  sku: String
  """Determines whether a trial period is possible before paying"""
  trialAllowed: Boolean!
  """
  Controls whether the subscription expires or converts to active when the trial expires
  """
  trialExpirationAction: TrialExpirationAction
  """The defaeult length in days of the trial period"""
  trialLengthDays: Int
  """Timestamp of last time the plan was updated"""
  updatedAt: ISO8601DateTime!
}

"""Attributes for creating and updating price lists"""
input PriceListAttributes {
  code: String
  currencyId: ID
  isVisible: Boolean
  name: String
  planId: ID
  sku: String
  trialAllowed: Boolean
  trialExpirationAction: TrialExpirationAction
  trialLengthDays: Int
}

type PriceListChangeOptions {
  priceLists: [PriceList!]
}

type PriceListCharge {
  accountingCode: String
  avalaraAfcSaleType: String
  avalaraAfcServiceType: String
  avalaraAfcTransactionType: String
  """Flat price or price of first tier if tiered or volume pricing"""
  basePrice: Float!
  billingPeriod: BillingPeriod
  chargeType: ChargeType
  code: String
  createdAt: ISO8601DateTime!
  """The currency of the prices on the price list charge"""
  currencyId: ID!
  feature: Feature
  featureId: ID
  financialAccount: FinancialAccount
  financialAccountId: ID
  id: ID!
  isTelecomCharge: Boolean
  longName: String
  name: String!
  plan: Plan
  position: Int
  price: BigDecimal
  priceDecimals: Int
  """One-line summary of pricing before discounts"""
  priceDescription: String
  priceList: PriceList
  priceListChargeTiers: [PriceListChargeTier!]
  priceListId: ID!
  pricingModel: PricingModel
  product: Product
  productId: ID!
  quantityMax: Int
  quantityMin: Int
  recognitionPeriod: Int
  roundUpInterval: Int
  selfServiceQuantity: Boolean
  showPriceAsMonthly: Boolean
  specificInvoiceLineText: String
  taxCode: String
  updatedAt: ISO8601DateTime!
  """
  Describes how usage should be aggregated during a
                                                                                    billing period. Must be one of sum, max, last
  """
  usageCalculationType: UsageCalculation
}

input PriceListChargeAttributes {
  accountingCode: String
  avalaraAfcSaleType: String
  avalaraAfcServiceType: String
  avalaraAfcTransactionType: String
  billingPeriod: BillingPeriod
  chargeType: ChargeType
  code: String
  featureId: ID
  financialAccountId: ID
  id: ID
  isTelecomCharge: Boolean
  name: String
  position: Int
  price: BigDecimal
  priceDecimals: Int
  priceListChargeTiers: [PriceListChargeTierAttributes!]
  priceListId: ID
  pricingModel: PricingModel
  quantityMax: Int
  quantityMin: Int
  recognitionPeriod: Int
  roundUpInterval: Int
  selfServiceQuantity: Boolean
  showPriceAsMonthly: Boolean
  specificInvoiceLineText: String
  taxCode: String
  usageCalculationType: UsageCalculation
}

"""The connection type for PriceListCharge."""
type PriceListChargeConnection {
  """A list of edges."""
  edges: [PriceListChargeEdge]
  """A list of nodes."""
  nodes: [PriceListCharge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of PriceListChargeCreate."""
type PriceListChargeCreatePayload {
  errors: [String!]
  priceListCharge: PriceListCharge
}

"""Autogenerated return type of PriceListChargeDelete."""
type PriceListChargeDeletePayload {
  errors: [String!]!
}

"""An edge in a connection."""
type PriceListChargeEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: PriceListCharge
}

type PriceListChargeOptions {
  billingPeriods: [String!]
  chargeTypes: [String!]
  pricingModels: [String!]
  """
  Describes how usage should be aggregated during a billing period. Must be one of sum, max, last
  """
  usageCalculationTypes: [String!]
}

type PriceListChargeTier {
  price: Float
  starts: Int
}

"""
Attributes for creating and updating price tiers on product plan charges
"""
input PriceListChargeTierAttributes {
  price: BigDecimal
  starts: Int
}

"""Autogenerated return type of PriceListChargeUpdate."""
type PriceListChargeUpdatePayload {
  errors: [String!]
  priceListCharge: PriceListCharge
}

"""The connection type for PriceList."""
type PriceListConnection {
  """A list of edges."""
  edges: [PriceListEdge]
  """A list of nodes."""
  nodes: [PriceList]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of PriceListCreate."""
type PriceListCreatePayload {
  errors: [String!]
  priceList: PriceList
}

"""Autogenerated return type of PriceListDelete."""
type PriceListDeletePayload {
  errors: [String!]
  priceList: PriceList!
}

"""Autogenerated return type of PriceListDuplicate."""
type PriceListDuplicatePayload {
  errors: [String!]!
  priceList: PriceList
}

"""An edge in a connection."""
type PriceListEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: PriceList
}

"""Autogenerated return type of PriceListUpdate."""
type PriceListUpdatePayload {
  errors: [String!]
  priceList: PriceList
}

enum PricingModel {
  """Bands pricing"""
  BANDS
  """Flat pricing"""
  FLAT
  """Tiered pricing"""
  TIERED
  """Volume pricing"""
  VOLUME
}

type Product {
  """Unique code"""
  code: String
  """Product description"""
  description: String
  """Lays out plan features in typical everything-in-X-plus style"""
  everythingInPlus: Boolean
  """The features available on the product"""
  features(filter: String, sort: String): [Feature!]
  """Unique identifier for the product"""
  id: ID!
  """Internal notes"""
  internalNotes: String
  """Unique product name"""
  name: String!
  """Default values for a new plan"""
  planDefaults: Plan
  """The plan available on the product"""
  plans(filter: String, sort: String): [Plan!]
  """Platform object"""
  platform: Platform
  """ID of the platform this plan is provisioned to"""
  platformId: ID
  """Product category object"""
  productCategory: ProductCategory
  """ID of the product category"""
  productCategoryId: ID
  """Prefix quote and invoice line items with product name"""
  showProductNameOnLineItem: Boolean
}

"""Attributes for creating and updating a product"""
input ProductAttributes {
  code: String
  description: String
  """Lays out plan features in typical everything-in-X-plus style"""
  everythingInPlus: Boolean
  internalNotes: String
  name: String
  platformId: ID
  productCategoryId: ID
  """Prefix quote and invoice line items with product name"""
  showProductNameOnLineItem: Boolean
}

type ProductCategory {
  createdAt: ISO8601DateTime!
  id: ID!
  name: String
  plans: [Plan!]
  updatedAt: ISO8601DateTime!
}

"""Attributes for creating and updating a product category"""
input ProductCategoryAttributes {
  name: String
}

"""The connection type for ProductCategory."""
type ProductCategoryConnection {
  """A list of edges."""
  edges: [ProductCategoryEdge]
  """A list of nodes."""
  nodes: [ProductCategory]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of ProductCategoryCreate."""
type ProductCategoryCreatePayload {
  errors: [String!]
  productCategory: ProductCategory
}

"""Autogenerated return type of ProductCategoryDelete."""
type ProductCategoryDeletePayload {
  errors: String
  productCategory: ProductCategory
}

"""An edge in a connection."""
type ProductCategoryEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: ProductCategory
}

"""Autogenerated return type of ProductCategoryUpdate."""
type ProductCategoryUpdatePayload {
  errors: [String!]
  productCategory: ProductCategory
}

"""The connection type for Product."""
type ProductConnection {
  """A list of edges."""
  edges: [ProductEdge]
  """A list of nodes."""
  nodes: [Product]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of ProductCreate."""
type ProductCreatePayload {
  errors: [String!]
  product: Product
}

"""Autogenerated return type of ProductDelete."""
type ProductDeletePayload {
  errors: [String!]
  product: Product!
}

"""Autogenerated return type of ProductDuplicate."""
type ProductDuplicatePayload {
  errors: [String!]!
  product: Product
}

"""An edge in a connection."""
type ProductEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Product
}

"""Autogenerated return type of ProductImport."""
type ProductImportPayload {
  errors: String
  response: JSON
}

"""Autogenerated return type of ProductUpdate."""
type ProductUpdatePayload {
  errors: [String!]
  product: Product
}

"""Autogenerated return type of ProvisioningWorkflowTest."""
type ProvisioningWorkflowTestPayload {
  errors: [String!]
}

type Query {
  """
  An account record is used to represent a customer or trialist [REQUIRED_SCOPES:standard:read]
  """
  account(
    """ID or Code required"""
    code: String
    """ID or Code required"""
    id: ID
  ): Account
  """
  An account balance represents the money debited or credited in a given currency [REQUIRED_SCOPES:standard:read]
  """
  accountBalance(code: String, format: String, id: ID): AccountBalance
  """
  An account balance represents the money debited or credited in a given currency [REQUIRED_SCOPES:standard:read]
  """
  accountBalances(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): AccountBalanceConnection
  """The type of account [REQUIRED_SCOPES:standard:read]"""
  accountType(code: String, format: String, id: ID): AccountType
  """The type of account [REQUIRED_SCOPES:standard:read]"""
  accountTypes(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): AccountTypeConnection
  """ [REQUIRED_SCOPES:standard:read]"""
  accountingTable(entityId: ID!, table: String!, year: Int!): AccountingTable!
  """
  An account record is used to represent a customer or trialist [REQUIRED_SCOPES:standard:read]
  """
  accounts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    hasRevenueInFiscalYear: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): AccountConnection!
  """ [REQUIRED_SCOPES:developer:read]"""
  apiClient(code: String, format: String, id: ID): ApiClient
  """ [REQUIRED_SCOPES:developer:read]"""
  apiClients(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): ApiClientConnection
  """ [REQUIRED_SCOPES:standard:read]"""
  approvalRule(code: String, format: String, id: ID): ApprovalRule
  """ [REQUIRED_SCOPES:standard:read]"""
  approvalRules(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): ApprovalRuleConnection
  """ [REQUIRED_SCOPES:security:read]"""
  approver(code: String, format: String, id: ID): Approver
  """ [REQUIRED_SCOPES:security:read]"""
  approvers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): ApproverConnection
  """ [REQUIRED_SCOPES:standard:read]"""
  billRun(code: String, format: String, id: ID): BillRun
  """ [REQUIRED_SCOPES:standard:read]"""
  billRuns(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): BillRunConnection
  """Billing details for an account [REQUIRED_SCOPES:portal:read]"""
  billingDetails(id: ID): BillingDetails!
  """
  Campaigns are used to track where contacts and leads originate from [REQUIRED_SCOPES:standard:read]
  """
  campaign(code: String, format: String, id: ID): Campaign
  """
  Campaigns are used to track where contacts and leads originate from [REQUIRED_SCOPES:standard:read]
  """
  campaigns(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): CampaignConnection
  """ [REQUIRED_SCOPES:admin:read]"""
  company: Company
  """
  The contact record for a person on an account [REQUIRED_SCOPES:standard:read]
  """
  contact(
    """ID or Code required"""
    code: String
    """ID or Code required"""
    id: ID
  ): Contact
  """
  The contact record for a person on an account [REQUIRED_SCOPES:standard:read]
  """
  contacts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): ContactConnection!
  """
  The coupon record that can be applied to a subscription [REQUIRED_SCOPES:product:read]
  """
  coupon(
    """ID or Code required"""
    code: String
    """ID or Code required"""
    id: ID
  ): Coupon
  """
  The coupon record that can be applied to a subscription [REQUIRED_SCOPES:product:read]
  """
  coupons(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): CouponConnection!
  """ [REQUIRED_SCOPES:billing:read]"""
  creditNote(code: String, format: String, id: ID): CreditNote
  """ [REQUIRED_SCOPES:billing:read]"""
  creditNotes(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): CreditNoteConnection
  """ [REQUIRED_SCOPES:standard:read]"""
  currencies(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): CurrencyConnection!
  """ [REQUIRED_SCOPES:standard:read]"""
  currency(id: ID!): Currency
  """ [REQUIRED_SCOPES:standard:read]"""
  currentUser: CurrentUser!
  """
  A deal represents an opportunity to increase revenue [REQUIRED_SCOPES:standard:read]
  """
  deal(
    """ID or Code required"""
    code: String
    """ID or Code required"""
    id: ID
  ): Deal
  """A stage in the sales pipeline [REQUIRED_SCOPES:standard:read]"""
  dealStage(code: String, format: String, id: ID): DealStage
  """A stage in the sales pipeline [REQUIRED_SCOPES:standard:read]"""
  dealStages(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): DealStageConnection
  """
  A deal represents an opportunity to increase revenue [REQUIRED_SCOPES:standard:read]
  """
  deals(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): DealConnection!
  deepEvents(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    limit: Int
    objectId: ID
    objectType: String
  ): EventConnection
  """ [REQUIRED_SCOPES:billing:read]"""
  disputeReason(code: String, format: String, id: ID): DisputeReason
  """ [REQUIRED_SCOPES:billing:read]"""
  disputeReasons(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): DisputeReasonConnection
  draftCreditNotes(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
  ): CreditNoteConnection!
  draftInvoices(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
  ): InvoiceConnection!
  """ [REQUIRED_SCOPES:standard:read]"""
  email(code: String, format: String, id: ID): Email
  """ [REQUIRED_SCOPES:standard:read]"""
  emails(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): EmailConnection
  enabledOnlyForUsers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): UserConnection!
  """ [REQUIRED_SCOPES:admin:read]"""
  entities(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): EntityConnection
  """ [REQUIRED_SCOPES:admin:read]"""
  entity(code: String, format: String, id: ID): Entity
  """ [REQUIRED_SCOPES:standard:read]"""
  entityBranding: EntityBranding!
  """ [REQUIRED_SCOPES:standard:read]"""
  event(code: String, format: String, id: ID): Event
  """ [REQUIRED_SCOPES:standard:read]"""
  eventDetails(id: ID!): EventDetail
  """ [REQUIRED_SCOPES:standard:read]"""
  events(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): EventConnection
  """ [REQUIRED_SCOPES:product:read]"""
  feature(code: String, format: String, id: ID): Feature
  """ [REQUIRED_SCOPES:product:read]"""
  featureUsage(code: String, format: String, id: ID): FeatureUsage
  featureUsageHistogram(
    """
    Number of periods to calculate the histogram.
                                                                   Default is 4.
    """
    periods: Int
    """ID of the usage-based subscription charge"""
    subscriptionChargeId: ID!
  ): Histogram!
  """ [REQUIRED_SCOPES:product:read]"""
  featureUsages(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): FeatureUsageConnection
  """ [REQUIRED_SCOPES:product:read]"""
  features(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): FeatureConnection
  """ [REQUIRED_SCOPES:standard:read]"""
  field(code: String, format: String, id: ID): Field
  """ [REQUIRED_SCOPES:standard:read]"""
  fields(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): FieldConnection
  """
  The financial account record used for accounting [REQUIRED_SCOPES:billing:read]
  """
  financialAccount(
    """ID or Code required"""
    code: String
    """ID or Code required"""
    id: ID
  ): FinancialAccount
  """
  The financial account record used for accounting [REQUIRED_SCOPES:billing:read]
  """
  financialAccounts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): FinancialAccountConnection!
  """ [REQUIRED_SCOPES:billing:read]"""
  formattedCreditNote(id: ID): FormattedCreditNote!
  """ [REQUIRED_SCOPES:billing:read]"""
  formattedInvoice(id: ID): FormattedInvoice!
  """ [REQUIRED_SCOPES:standard:read quoting:read]"""
  formattedQuote(
    """Quote ID. If not provided, it returns the quote in context"""
    id: ID
  ): FormattedQuote!
  """ [REQUIRED_SCOPES:security:read]"""
  group(code: String, format: String, id: ID): Group
  """ [REQUIRED_SCOPES:security:read]"""
  groups(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): GroupConnection
  """Industry for accounts and deals [REQUIRED_SCOPES:standard:read]"""
  industries(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): IndustryConnection
  """Industry for accounts and deals [REQUIRED_SCOPES:standard:read]"""
  industry(code: String, format: String, id: ID): Industry
  """ [REQUIRED_SCOPES:billing:read]"""
  intracomVats(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): IntracomVatConnection!
  """ [REQUIRED_SCOPES:billing:read]"""
  invoice(id: ID!): Invoice
  """ [REQUIRED_SCOPES:standard:read]"""
  invoiceItem(code: String, format: String, id: ID): InvoiceItem
  """ [REQUIRED_SCOPES:standard:read]"""
  invoiceItems(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): InvoiceItemConnection
  """ [REQUIRED_SCOPES:billing:read]"""
  invoiceTemplate(id: ID!): InvoiceTemplate
  """ [REQUIRED_SCOPES:billing:read]"""
  invoiceTemplates(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
  ): InvoiceTemplateConnection!
  """ [REQUIRED_SCOPES:billing:read]"""
  invoices(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): InvoiceConnection!
  isolateTos(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): UserConnection!
  """Background jobs processed by Bunny [REQUIRED_SCOPES:workflow:read]"""
  job(id: ID!): Job!
  """Background jobs processed by Bunny [REQUIRED_SCOPES:workflow:read]"""
  jobs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): JobConnection!
  """
  The Journal Entry represents a financial transaction [REQUIRED_SCOPES:standard:read]
  """
  journalEntries(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): JournalEntryConnection
  """
  The Journal Entry represents a financial transaction [REQUIRED_SCOPES:standard:read]
  """
  journalEntry(code: String, format: String, id: ID): JournalEntry
  """
  The Journal Entry Line represents a financial transaction line item [REQUIRED_SCOPES:standard:read]
  """
  journalEntryLine(code: String, format: String, id: ID): JournalEntryLine
  """
  The Journal Entry Line represents a financial transaction line item [REQUIRED_SCOPES:standard:read]
  """
  journalEntryLines(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): JournalEntryLineConnection
  """
  Leads are used to track potential new opportunities and can be converted to accounts [REQUIRED_SCOPES:standard:read]
  """
  lead(id: ID!): Lead
  """Source of the lead [REQUIRED_SCOPES:standard:read]"""
  leadSource(code: String, format: String, id: ID): LeadSource
  """Source of the lead [REQUIRED_SCOPES:standard:read]"""
  leadSources(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): LeadSourceConnection
  """Status of a lead [REQUIRED_SCOPES:standard:read]"""
  leadStatus(id: ID!): LeadStatus
  """Status of a lead [REQUIRED_SCOPES:standard:read]"""
  leadStatuses(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): LeadStatusConnection!
  """
  Leads are used to track potential new opportunities and can be converted to accounts [REQUIRED_SCOPES:standard:read]
  """
  leads(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): LeadConnection!
  """ [REQUIRED_SCOPES:standard:read]"""
  monthlyReport(entityId: ID, year: Int!): MonthlyReport!
  """ [REQUIRED_SCOPES:standard:read]"""
  notification(code: String, format: String, id: ID): Notification
  """ [REQUIRED_SCOPES:standard:read]"""
  notifications(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): NotificationConnection
  """ [REQUIRED_SCOPES:standard:read]"""
  obj(name: String!): [Obj!]!
  """ [REQUIRED_SCOPES:standard:read]"""
  objs: [Obj!]!
  owners(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): UserConnection!
  """ [REQUIRED_SCOPES:standard:read]"""
  payment(code: String, format: String, id: ID): Payment
  """ [REQUIRED_SCOPES:standard:read]"""
  paymentApplication(code: String, format: String, id: ID): PaymentApplication
  """ [REQUIRED_SCOPES:standard:read]"""
  paymentApplications(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): PaymentApplicationConnection
  """ [REQUIRED_SCOPES:billing:read]"""
  paymentMethod(code: String, format: String, id: ID): PaymentMethod
  """ [REQUIRED_SCOPES:billing:read]"""
  paymentMethods(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): PaymentMethodConnection
  """ [REQUIRED_SCOPES:standard:read]"""
  payments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): PaymentConnection
  """ [REQUIRED_SCOPES:standard:read]"""
  period(id: ID!): Period
  """ [REQUIRED_SCOPES:standard:read]"""
  periods(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): PeriodConnection!
  """ [REQUIRED_SCOPES:product:read]"""
  plan(id: ID!): Plan
  planChangeOptions(
    """The subscription ID"""
    subscriptionId: ID
  ): PlanChangeOptions!
  """ [REQUIRED_SCOPES:product:read]"""
  planFeature(code: String, format: String, id: ID): PlanFeature
  """ [REQUIRED_SCOPES:product:read]"""
  planFeatures(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): PlanFeatureConnection
  """ [REQUIRED_SCOPES:product:read]"""
  plans(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): PlanConnection!
  """ [REQUIRED_SCOPES:product:read]"""
  platform(code: String, format: String, id: ID): Platform
  """ [REQUIRED_SCOPES:product:read]"""
  platforms(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): PlatformConnection
  """ [REQUIRED_SCOPES:standard:read plugins:read]"""
  plugin(code: String, format: String, id: ID): Plugin
  """ [REQUIRED_SCOPES:standard:read]"""
  pluginDefinition(code: String, format: String, id: ID): PluginDefinition
  """ [REQUIRED_SCOPES:standard:read]"""
  pluginDefinitions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): PluginDefinitionConnection
  """ [REQUIRED_SCOPES:standard:read]"""
  pluginEntities(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): PluginEntityConnection
  """ [REQUIRED_SCOPES:standard:read]"""
  pluginEntity(code: String, format: String, id: ID): PluginEntity
  """ [REQUIRED_SCOPES:standard:read]"""
  pluginParameter(code: String, format: String, id: ID): PluginParameter
  """ [REQUIRED_SCOPES:standard:read]"""
  pluginParameters(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): PluginParameterConnection
  """ [REQUIRED_SCOPES:standard:read]"""
  pluginVendor(code: String, format: String, id: ID): PluginVendor
  """ [REQUIRED_SCOPES:standard:read]"""
  pluginVendors(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): PluginVendorConnection
  """ [REQUIRED_SCOPES:standard:read plugins:read]"""
  plugins(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): PluginConnection
  """ [REQUIRED_SCOPES:product:read]"""
  priceList(code: String, format: String, id: ID): PriceList
  priceListChangeOptions(
    """The subscription ID"""
    subscriptionId: ID
  ): PriceListChangeOptions!
  """ [REQUIRED_SCOPES:product:read]"""
  priceListCharge(code: String, format: String, id: ID): PriceListCharge
  """ [REQUIRED_SCOPES:product:read]"""
  priceListChargeOptions: PriceListChargeOptions!
  """ [REQUIRED_SCOPES:product:read]"""
  priceListCharges(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): PriceListChargeConnection
  """ [REQUIRED_SCOPES:product:read]"""
  priceLists(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): PriceListConnection
  """ [REQUIRED_SCOPES:product:read]"""
  product(id: ID!): Product
  """ [REQUIRED_SCOPES:product:read]"""
  productCategories(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): ProductCategoryConnection
  """ [REQUIRED_SCOPES:product:read]"""
  productCategory(code: String, format: String, id: ID): ProductCategory
  """ [REQUIRED_SCOPES:product:read]"""
  products(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): ProductConnection!
  """ [REQUIRED_SCOPES:standard:read]"""
  quote(code: String, format: String, id: ID): Quote
  """ [REQUIRED_SCOPES:standard:read]"""
  quoteChange(code: String, format: String, id: ID): QuoteChange
  """ [REQUIRED_SCOPES:standard:read]"""
  quoteChanges(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): QuoteChangeConnection
  """ [REQUIRED_SCOPES:standard:read]"""
  quoteCharge(code: String, format: String, id: ID): QuoteCharge
  """ [REQUIRED_SCOPES:standard:read]"""
  quoteCharges(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): QuoteChargeConnection
  """ [REQUIRED_SCOPES:standard:read]"""
  quotes(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): QuoteConnection
  """ [REQUIRED_SCOPES:billing:read]"""
  recurringRevenue(code: String, format: String, id: ID): RecurringRevenue
  """ [REQUIRED_SCOPES:billing:read]"""
  recurringRevenues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): RecurringRevenueConnection
  """ [REQUIRED_SCOPES:standard:read]"""
  revenueDetails(accountId: Int): [RevenueDetail!]
  """ [REQUIRED_SCOPES:billing:read]"""
  revenueMovement(id: ID!): RevenueMovement
  """ [REQUIRED_SCOPES:billing:read]"""
  revenueMovements(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): RevenueMovementConnection!
  """ [REQUIRED_SCOPES:standard:read]"""
  revenueRecognitionTable(entityId: ID!, filter: String, limit: Int, offset: Int, year: Int!): RevenueRecognitionTable!
  """ [REQUIRED_SCOPES:security:read]"""
  role(code: String, format: String, id: ID): Role
  roleScopes(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): RoleScopeConnection!
  """ [REQUIRED_SCOPES:security:read]"""
  roles(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): RoleConnection
  search(text: String!): [SearchResult!]!
  """ [REQUIRED_SCOPES:standard:read]"""
  secondaryBillingContacts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): SecondaryBillingContactConnection!
  """ [REQUIRED_SCOPES:billing:read]"""
  subscription(code: String, format: String, id: ID): Subscription
  """ [REQUIRED_SCOPES:billing:read]"""
  subscriptionCharge(code: String, format: String, id: ID): SubscriptionCharge
  """ [REQUIRED_SCOPES:billing:read]"""
  subscriptionCharges(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): SubscriptionChargeConnection
  subscriptionFeatures(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): UsageSubscriptionChargeConnection!
  """ [REQUIRED_SCOPES:billing:read]"""
  subscriptions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): SubscriptionConnection
  """ [REQUIRED_SCOPES:standard:read]"""
  taxationEntityUseCodes: [TaxationEntityUseCode!]!
  """ [REQUIRED_SCOPES:admin:read]"""
  template(code: String, format: String, id: ID): Template
  """ [REQUIRED_SCOPES:admin:read]"""
  templates(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): TemplateConnection
  """ [REQUIRED_SCOPES:product:read]"""
  tenant(code: String, format: String, id: ID): Tenant
  """ [REQUIRED_SCOPES:standard:read]"""
  tenantProvisioningChange(code: String, format: String, id: ID): TenantProvisioningChange
  """ [REQUIRED_SCOPES:standard:read]"""
  tenantProvisioningChanges(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): TenantProvisioningChangeConnection
  """ [REQUIRED_SCOPES:product:read]"""
  tenants(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): TenantConnection
  """ [REQUIRED_SCOPES:billing:read]"""
  transaction(code: String, format: String, id: ID): Transaction
  """ [REQUIRED_SCOPES:billing:read]"""
  transactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): TransactionConnection
  """ [REQUIRED_SCOPES:security:read]"""
  user(code: String, format: String, id: ID): User
  """ [REQUIRED_SCOPES:security:read]"""
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): UserConnection
  """ [REQUIRED_SCOPES:product:read]"""
  validCoupon(couponCode: String!): CouponValidate!
  """
  Defines table views with conditions and column configurations [REQUIRED_SCOPES:standard:read]
  """
  view(code: String, format: String, id: ID): View
  """
  Defines table views with conditions and column configurations [REQUIRED_SCOPES:standard:read]
  """
  views(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): ViewConnection
  """A webhook payload [REQUIRED_SCOPES:workflow:read]"""
  webhookEvent(id: ID!): WebhookEvent
  """A webhook payload [REQUIRED_SCOPES:workflow:read]"""
  webhookEvents(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String = "created_at DESC"
  ): WebhookEventConnection!
  """
  A workflow containing triggers and jobs [REQUIRED_SCOPES:workflow:read]
  """
  workflow(code: String, format: String, id: ID): Workflow
  """A workflow action definition [REQUIRED_SCOPES:workflow:read]"""
  workflowActions(objectType: String): [WorkflowAction!]
  """A category of workflows [REQUIRED_SCOPES:admin:read]"""
  workflowCategories(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): WorkflowCategoryConnection
  """A category of workflows [REQUIRED_SCOPES:admin:read]"""
  workflowCategory(code: String, format: String, id: ID): WorkflowCategory
  """A workflow job log entry [REQUIRED_SCOPES:workflow:read]"""
  workflowJobLog(code: String, format: String, id: ID): WorkflowJobLog
  """A workflow job log entry [REQUIRED_SCOPES:workflow:read]"""
  workflowJobLogs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): WorkflowJobLogConnection
  """
  A workflow containing triggers and jobs [REQUIRED_SCOPES:workflow:read]
  """
  workflows(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: String
    """Returns the first _n_ elements from the list."""
    first: Int
    format: String
    """Returns the last _n_ elements from the list."""
    last: Int
    sort: String
    viewId: ID
  ): WorkflowConnection
}

type Quote {
  acceptedByName: String
  acceptedByTitle: String
  account: Account
  accountId: ID!
  amount: Float!
  amountDue: Float
  amountsByPeriod: [PeriodAmount!]!
  applicationDate: ISO8601Date
  applied: Boolean!
  approvalRequest: ApprovalRequest
  backdatedPeriods: Boolean
  backdatedQuote: Boolean
  billingCycles: [BillingCycle!]
  billingDay: Int
  contact: Contact
  contactId: ID
  createdAt: ISO8601DateTime!
  """Credits granted from plan upgrades"""
  credits: Float
  currencyId: ID!
  deal: Deal
  dealId: ID
  discount: Float
  """Amount discounted from subtotal"""
  discountValue: Float!
  documents: [Document!]
  endDate: ISO8601Date!
  endDateOptions: [DateOption!]
  evergreen: Boolean
  expiresAt: ISO8601Date!
  firstInvoice: Invoice
  formattedQuote: FormattedQuote
  """Null when previewing"""
  id: ID
  invoiceImmediately: Boolean
  invoiceImmediatelyAvailable: Boolean
  invoiceUntil: ISO8601Date!
  invoiceUntilOptions: [DateOption!]
  invoices: [Invoice!]
  isPendingApprovalRequest: Boolean!
  kind: QuoteChangeKind!
  """Personal message for the contact whom the quote is shared with"""
  message: String
  name: String
  netPaymentDays: Int
  """Notes pertaining to the quote"""
  notes: String
  number: String
  owner: User
  ownerId: ID
  payableId: ID
  """Amount for a single full period of the subscription"""
  periodAmount: Float
  plans: [QuotePlan!]
  poNumber: String
  quoteChanges: [QuoteChange!]
  requiresApproval: Boolean!
  """Amount in the currency smallest unit"""
  smallUnitAmountDue: Int
  splitInvoice: Boolean
  startDate: ISO8601Date!
  state: QuoteState!
  """Total without discount"""
  subtotal: Float!
  taxAmount: Float!
  taxCode: String
  """Approval rules triggered by the quote properties"""
  triggeredApprovalRules(approverId: ID): [ApprovalRule!]
  updatedAt: ISO8601DateTime!
  uuid: ID!
}

"""Autogenerated return type of QuoteAccept."""
type QuoteAcceptPayload {
  errors: String
}

"""Autogenerated return type of QuoteAccountSignup."""
type QuoteAccountSignupPayload {
  account: Account
  amount: Float
  currencyId: String
  errors: [String!]
  portalSessionToken: String
  quote: Quote
  tenant: Tenant
}

"""Autogenerated return type of QuoteAddCoupon."""
type QuoteAddCouponPayload {
  errors: String
  quote: Quote
}

"""Autogenerated return type of QuoteApplyChanges."""
type QuoteApplyChangesPayload {
  errors: [String!]
  invoice: Invoice
  quote: Quote!
  subscriptions: [Subscription!]
}

"""Autogenerated return type of QuoteApprovalCancel."""
type QuoteApprovalCancelPayload {
  errors: [String!]
  quote: [Quote!]!
}

"""Autogenerated return type of QuoteApprovalStart."""
type QuoteApprovalStartPayload {
  errors: [String!]
}

"""Autogenerated return type of QuoteApprove."""
type QuoteApprovePayload {
  errors: String
}

input QuoteAttributes {
  accountId: ID
  backdatedPeriods: Boolean
  contactId: ID
  currencyId: String
  dealId: ID
  discount: Float
  endDate: ISO8601Date
  evergreen: Boolean
  expiresAt: ISO8601Date
  invoiceImmediately: Boolean
  invoiceUntil: ISO8601Date
  """Personal message for the contact whom the quote is shared with"""
  message: String
  name: String
  netPaymentDays: Int
  """Notes pertaining to the quote"""
  notes: String
  ownerId: ID
  poNumber: String
  splitInvoice: Boolean
  startDate: ISO8601Date
}

type QuoteChange {
  charges(sort: String): [QuoteCharge!]!
  currencyId: ID!
  endDate: ISO8601Date
  id: ID
  """The available interval months options for ramp up changes"""
  intervalMonthsOptions: [Int!]
  kind: QuoteChangeKind!
  name: String!
  priceList: PriceList
  priceListId: ID
  """Standard pricing is used unless this is true"""
  priceOverride: Boolean
  quote: Quote!
  quoteId: ID!
  quotePlan: QuotePlan!
  quotePlanId: ID!
  """The selected interval months for ramp up changes"""
  rampIntervalMonths: Int
  startDate: ISO8601Date
  subscription: Subscription
  subscriptionId: ID
}

"""The connection type for QuoteChange."""
type QuoteChangeConnection {
  """A list of edges."""
  edges: [QuoteChangeEdge]
  """A list of nodes."""
  nodes: [QuoteChange]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of QuoteChangeCreate."""
type QuoteChangeCreatePayload {
  errors: [String!]
  quoteChange: QuoteChange
}

"""Autogenerated return type of QuoteChangeCreateRampUp."""
type QuoteChangeCreateRampUpPayload {
  errors: [String!]
  quoteChange: QuoteChange
}

"""Autogenerated return type of QuoteChangeCreateRampUpPreview."""
type QuoteChangeCreateRampUpPreviewPayload {
  errors: [String!]
  intervalMonthsOptions: [Int!]
  quoteChange: QuoteChange
}

"""Autogenerated return type of QuoteChangeDelete."""
type QuoteChangeDeletePayload {
  errors: [String!]
  quoteChange: QuoteChange
}

"""Autogenerated return type of QuoteChangeDiscountCreate."""
type QuoteChangeDiscountCreatePayload {
  errors: String
  quote: Quote
  quoteChangeDiscount: QuoteChange
}

"""An edge in a connection."""
type QuoteChangeEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: QuoteChange
}

enum QuoteChangeKind {
  """Adjustment quote"""
  ADJUSTMENT
  """Coupon quote"""
  COUPON
  """Credit quote"""
  CREDIT
  """Discount quote"""
  DISCOUNT
  """Reinstate quote"""
  REINSTATE
  """Renew quote"""
  RENEW
  """Subscribe quote"""
  SUBSCRIBE
  """Unsubscribe quote"""
  UNSUBSCRIBE
  """Update quote"""
  UPDATE
}

"""Autogenerated return type of QuoteChangeUpdate."""
type QuoteChangeUpdatePayload {
  errors: [String!]
  quoteChange: QuoteChange
}

"""Autogenerated return type of QuoteChangeUpdateRampUp."""
type QuoteChangeUpdateRampUpPayload {
  errors: [String!]
  quoteChange: QuoteChange
}

type QuoteCharge {
  amount: Float
  amountsByPeriod: [PeriodAmount!]
  billingPeriod: BillingPeriod
  billingPeriodAmounts: [BillingPeriodAmount!]
  chargeType: ChargeType
  couponId: ID
  createdAt: ISO8601DateTime!
  currencyId: ID!
  currentQuantity: Int
  discount: Float
  endDate: ISO8601Date!
  feature: Feature
  id: ID
  invoiceLineText: String
  isRamp: Boolean!
  kind: QuoteChangeKind
  name: String
  price: Float
  priceDecimals: Int
  priceList: PriceList
  priceListCharge: PriceListCharge
  priceListChargeId: ID
  priceTiers: [QuotePriceTier!]
  pricingModel: PricingModel
  prorationRate: Float
  quantity: Int
  quantityMax: Int
  quantityMin: Int
  quoteChange: QuoteChange!
  quoteChangeId: ID!
  startDate: ISO8601Date!
  subscriptionCharge: SubscriptionCharge
  subtotal: Float
  taxAmount: Float
  taxCode: String
  """Average price value when charge is Tiered"""
  tieredAveragePrice: Float
  updatedAt: ISO8601DateTime!
  vatCode: String
}

input QuoteChargeAttributes {
  code: String
  """Discount rate for the charge"""
  discount: Float
  endDate: ISO8601Date
  id: ID
  name: String
  price: BigDecimal
  priceListChargeId: ID
  priceTiers: [PriceListChargeTierAttributes!]
  quantity: Int
  startDate: ISO8601Date
  subtotal: BigDecimal
}

"""The connection type for QuoteCharge."""
type QuoteChargeConnection {
  """A list of edges."""
  edges: [QuoteChargeEdge]
  """A list of nodes."""
  nodes: [QuoteCharge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type QuoteChargeEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: QuoteCharge
}

"""Autogenerated return type of QuoteChargeFreeMonthsCreate."""
type QuoteChargeFreeMonthsCreatePayload {
  errors: [String!]
  quote: Quote
  quoteChange: QuoteChange
  quoteCharge: QuoteCharge
}

"""Autogenerated return type of QuoteChargeUpdate."""
type QuoteChargeUpdatePayload {
  errors: [String!]
  quoteCharge: QuoteCharge
}

"""Autogenerated return type of QuoteCompose."""
type QuoteComposePayload {
  quote: Quote!
}

"""The connection type for Quote."""
type QuoteConnection {
  """A list of edges."""
  edges: [QuoteEdge]
  """A list of nodes."""
  nodes: [Quote]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of QuoteCreate."""
type QuoteCreatePayload {
  errors: [String!]
  quote: Quote
}

"""Autogenerated return type of QuoteCreateSignUrl."""
type QuoteCreateSignUrlPayload {
  errors: [String!]
  pluginClientId: String
  pluginShortName: String
  redirectUri: String
}

"""Autogenerated return type of QuoteCreateWithDeal."""
type QuoteCreateWithDealPayload {
  deal: Deal
  errors: [String!]
  quote: Quote
}

"""Autogenerated return type of QuoteDelete."""
type QuoteDeletePayload {
  errors: [String!]
  quote: Quote
}

"""Autogenerated return type of QuoteDuplicate."""
type QuoteDuplicatePayload {
  errors: [String!]!
  quote: Quote
}

"""An edge in a connection."""
type QuoteEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Quote
}

input QuoteFreeMonthsAttributes {
  freeMonths: Int!
  """Whether the free periods should be added to the quote period"""
  freeMonthsAdd: Boolean = false
  name: String!
}

type QuoteLine {
  amount: Float!
  amountsByPeriod: [PeriodAmount!]!
  billingPeriodEnd: String
  billingPeriodStart: String
  chargeKind: QuoteChangeKind
  chargeType: String!
  discount: Float
  frequency: String!
  isRamp: Boolean!
  lineText: String
  periods: Int!
  planName: String!
  position: Int!
  price: Float
  priceDecimals: Int
  priceListChargeId: ID
  priceListChargeName: String
  priceListId: ID!
  priceListName: String
  priceTiers: [FormattedChargePriceTier!]
  pricingModel: String!
  productName: String!
  prorationRate: Float
  quantity: Int
  showProductNameOnLineItem: Boolean!
  taxCode: String
  trialAllowed: Boolean!
  trialEndDate: ISO8601Date
  trialStartDate: ISO8601Date
  unitOfMeasure: String!
  vatCode: String
}

type QuotePlan {
  charges: [QuoteCharge!]
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  plan: Plan
  position: Int!
  priceListId: ID!
  productId: ID
  quoteChangeId: ID!
  quoteChangeKind: QuoteChangeKind!
  subscriptionCharges: [SubscriptionCharge!]
  subscriptionId: ID
  updatedAt: ISO8601DateTime!
}

type QuotePlanPreview {
  errors: [String!]
  formattedInvoice: FormattedInvoice
  formattedQuote: FormattedQuote!
  invoice: Invoice
  quote: Quote!
  subscriptions: [Subscription!]!
}

"""Autogenerated return type of QuotePollSigningUrl."""
type QuotePollSigningUrlPayload {
  errors: [String!]
  infoMessage: String
  redirectUri: String
  shouldPoll: Boolean
  status: String
}

type QuotePriceTier {
  ends: Int
  price: Float
  starts: Int
}

"""Autogenerated return type of QuoteRecalculateTaxes."""
type QuoteRecalculateTaxesPayload {
  errors: JSON
  quote: Quote
}

"""Autogenerated return type of QuoteReject."""
type QuoteRejectPayload {
  errors: String
}

"""Autogenerated return type of QuoteRemoveCoupons."""
type QuoteRemoveCouponsPayload {
  errors: String
  quote: Quote
}

"""Autogenerated return type of QuoteSendEmail."""
type QuoteSendEmailPayload {
  errors: [String!]
}

enum QuoteState {
  """Accepted quote"""
  ACCEPTED
  """Approved quote"""
  APPROVED
  """Draft quote"""
  DRAFT
  """In_approval quote"""
  IN_APPROVAL
  """Rejected quote"""
  REJECTED
  """Shared quote"""
  SHARED
  """Undone quote"""
  UNDONE
  """Viewed quote"""
  VIEWED
}

"""Autogenerated return type of QuoteSubscriptionReinstate."""
type QuoteSubscriptionReinstatePayload {
  errors: [JSON!]!
  quote: Quote
}

"""Autogenerated return type of QuoteSubscriptionRenew."""
type QuoteSubscriptionRenewPayload {
  errors: [String!]!
  quote: Quote
}

"""Autogenerated return type of QuoteSubscriptionUpdate."""
type QuoteSubscriptionUpdatePayload {
  errors: [String!]
  quote: Quote
}

"""Autogenerated return type of QuoteSubscriptionUpgrade."""
type QuoteSubscriptionUpgradePayload {
  errors: [String!]
  quote: Quote!
}

"""Autogenerated return type of QuoteUndo."""
type QuoteUndoPayload {
  errors: [String!]
  invoices: [Invoice!]
  quote: Quote
  subscriptions: [Subscription!]
}

"""Autogenerated return type of QuoteUnshare."""
type QuoteUnsharePayload {
  errors: [String!]
  quote: Quote
}

"""Autogenerated return type of QuoteUpdate."""
type QuoteUpdatePayload {
  errors: [String!]
  quote: Quote
}

type RecurringRevenue {
  """Account the revenue belongs to"""
  accountId: ID
  currencyId: ID!
  """The calendar month the revenue belongs to"""
  date: ISO8601Date!
  """Unique ID for this record"""
  id: ID
  """Monthly recurring revenue amount at the time of the query"""
  recurringAmount: Float
  """Usage + recurring revenie"""
  totalAmount: Float
  """Monthly usage revenue amount at the time of the query"""
  usageAmount: Float
}

"""The connection type for RecurringRevenue."""
type RecurringRevenueConnection {
  """A list of edges."""
  edges: [RecurringRevenueEdge]
  """A list of nodes."""
  nodes: [RecurringRevenue]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type RecurringRevenueEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: RecurringRevenue
}

type RelatedObject {
  id: ID!
  name: String!
}

type RevenueDetail {
  currencyId: ID
  deferred: Float
  id: Int
  month: Int
  recognized: Float
  year: Int
}

type RevenueMovement {
  """The account the revenue movement belongs to"""
  account: Account
  accountId: ID!
  currencyId: ID!
  date: ISO8601Date
  """IDs are null when object is previewed"""
  id: ID
  movementType: String
  recurringAmount: Float
  totalAmount: Float
  usageAmount: Float
  usageMovementType: String
}

"""The connection type for RevenueMovement."""
type RevenueMovementConnection {
  """A list of edges."""
  edges: [RevenueMovementEdge]
  """A list of nodes."""
  nodes: [RevenueMovement]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type RevenueMovementEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: RevenueMovement
}

type RevenueRecognitionAccount {
  dateLabels: [String!]!
  documents: [RevenueRecognitionDocument!]!
  id: ID!
  name: String!
  totals: [RevenueRecognitionMonths!]!
}

type RevenueRecognitionDateLabel {
  date: String!
  label: String!
}

type RevenueRecognitionDocument {
  id: ID!
  items: [RevenueRecognitionItem!]
  number: ID!
  totals: [RevenueRecognitionMonths!]!
}

type RevenueRecognitionItem {
  id: ID!
  months: [RevenueRecognitionMonths!]!
  name: String!
  period: String
}

type RevenueRecognitionMonths {
  balance: Float
  dateLabel: String!
  revenue: Float
}

type RevenueRecognitionTable {
  accounts: [RevenueRecognitionAccount!]!
  dateLabels: [RevenueRecognitionDateLabel!]!
  totals: [RevenueRecognitionMonths!]!
}

type Role {
  id: ID!
  name: String!
  scopes: [String!]
}

input RoleAttributes {
  name: String
  scopes: [String!]
}

"""The connection type for Role."""
type RoleConnection {
  """A list of edges."""
  edges: [RoleEdge]
  """A list of nodes."""
  nodes: [Role]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of RoleCreate."""
type RoleCreatePayload {
  errors: [String!]
  role: Role
}

"""Autogenerated return type of RoleDelete."""
type RoleDeletePayload {
  errors: String
  role: Role
}

"""An edge in a connection."""
type RoleEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Role
}

type RoleScope {
  description: String!
  id: ID
  name: String!
}

"""The connection type for RoleScope."""
type RoleScopeConnection {
  """A list of edges."""
  edges: [RoleScopeEdge]
  """A list of nodes."""
  nodes: [RoleScope]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type RoleScopeEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: RoleScope
}

"""Autogenerated return type of RoleUpdate."""
type RoleUpdatePayload {
  errors: [String!]
  role: Role
}

type SearchResult {
  content: String
  id: ID
  model: String
  """Datetime the object was last updated"""
  objUpdatedAt: ISO8601DateTime
}

type SecondaryBillingContact {
  accountId: ID!
  contactId: ID!
}

"""The connection type for SecondaryBillingContact."""
type SecondaryBillingContactConnection {
  """A list of edges."""
  edges: [SecondaryBillingContactEdge]
  """A list of nodes."""
  nodes: [SecondaryBillingContact]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type SecondaryBillingContactEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: SecondaryBillingContact
}

"""Autogenerated return type of SignupActivate."""
type SignupActivatePayload {
  errors: [String!]
  loginUrl: String
}

input SignupAttributes {
  company: String!
  email: String!
  firstName: String!
  lastName: String!
  subdomain: String
}

"""Autogenerated return type of SignupCreate."""
type SignupCreatePayload {
  errors: [String!]!
  token: String
}

enum SsoMode {
  """auto"""
  auto
  """prompt"""
  prompt
}

type Subscription {
  account: Account!
  accountId: ID!
  cancellationDate: ISO8601Date
  charges: [SubscriptionCharge!]
  createdAt: ISO8601DateTime
  currencyId: ID!
  endDate: ISO8601Date
  evergreen: Boolean!
  id: ID!
  name: String
  period: String!
  plan: Plan
  priceList: PriceList
  priceListId: ID!
  priceOverride: Boolean!
  product: Product
  provisioningRequired: Boolean!
  rampIntervalMonths: Int
  startDate: ISO8601Date
  state: SubscriptionState!
  tenant: Tenant
  trialEndDate: ISO8601Date
  trialPeriod: String!
  trialStartDate: ISO8601Date
  updatedAt: ISO8601DateTime
}

input SubscriptionAttributes {
  """Fields to create the company or organization that is subscribing"""
  account: AccountAttributes
  """The code of the company or organization that is subscribing"""
  accountCode: String
  """The id of the company or organization that is subscribing"""
  accountId: ID
  """Set custom discount amount for price list charges"""
  discounts: [QuoteChargeAttributes!]
  """Date that the subscription ends"""
  endDate: ISO8601Date
  """Indicates if the subscription should be renewed automatically"""
  evergreen: Boolean
  """Set custom quantity, price and discount rate for charges"""
  priceListCharges: [QuoteChargeAttributes!]
  """The code of the plan to subscribe to"""
  priceListCode: String
  """The id of the plan to subscribe to"""
  priceListId: ID
  """
  Indicates if the subscription should be renewed with prices from the price list
  """
  priceOverride: Boolean
  """Date that the subscription starts"""
  startDate: ISO8601Date
  """Fields to create a tenant for the subscription"""
  tenant: TenantAttributes
  """A unique code that represents the tenant in a SaaS application"""
  tenantCode: String
  """The name of the tenant. Typically this is the account name"""
  tenantName: String
  """Indicates if the subscription is a trial or immediately active"""
  trial: Boolean
  """Overrides the default trial start date"""
  trialStartDate: ISO8601Date
}

"""Autogenerated return type of SubscriptionCancel."""
type SubscriptionCancelPayload {
  errors: [String!]
  subscriptions: [Subscription!]
}

type SubscriptionCharge {
  account: Account!
  amount: Float
  billingPeriod: BillingPeriod
  chargeType: ChargeType
  createdAt: ISO8601DateTime!
  currency: Currency!
  currentPeriodPriceByTiers: [SubscriptionTieredPrice!]
  discount: Float
  discountedPrice: String
  endDate: ISO8601Date!
  expired: Boolean!
  feature: Feature
  id: ID!
  invoiceLineText: String!
  isAmendment: Boolean!
  isRamp: Boolean!
  kind: QuoteChangeKind
  name: String
  periodPrice: Float
  price: String
  priceDecimals: Int
  priceList: PriceList
  priceListCharge: PriceListCharge
  priceListChargeId: ID
  priceListId: ID
  priceTiers: [SubscriptionPriceTier!]
  pricingModel: PricingModel
  prorationRate: Float
  quantity: Int
  quantityMax: Int
  quantityMin: Int
  selfServiceQuantity: Boolean
  startDate: ISO8601Date!
  subscription: Subscription!
  subscriptionId: ID!
  """Average price value when charge is Tiered"""
  tieredAveragePrice: Float
  trial: Boolean!
  updatedAt: ISO8601DateTime!
}

"""The connection type for SubscriptionCharge."""
type SubscriptionChargeConnection {
  """A list of edges."""
  edges: [SubscriptionChargeEdge]
  """A list of nodes."""
  nodes: [SubscriptionCharge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type SubscriptionChargeEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: SubscriptionCharge
}

"""The connection type for Subscription."""
type SubscriptionConnection {
  """A list of edges."""
  edges: [SubscriptionEdge]
  """A list of nodes."""
  nodes: [Subscription]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of SubscriptionCreate."""
type SubscriptionCreatePayload {
  errors: [String!]
  subscription: Subscription
}

"""Autogenerated return type of SubscriptionDelete."""
type SubscriptionDeletePayload {
  errors: String
  subscription: Subscription
}

"""An edge in a connection."""
type SubscriptionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Subscription
}

"""Representation of a price tier for a subscription charge."""
type SubscriptionPriceTier {
  ends: Int
  price: Float
  starts: Int
}

"""Autogenerated return type of SubscriptionReinstate."""
type SubscriptionReinstatePayload {
  errors: [JSON!]
  subscriptions: [Subscription!]
}

"""Autogenerated return type of SubscriptionSetAutoRenew."""
type SubscriptionSetAutoRenewPayload {
  errors: [String!]
  subscriptions: [Subscription!]!
}

enum SubscriptionState {
  """Active subscription"""
  ACTIVE
  """Cancelled subscription"""
  CANCELED
  """Expired subscription"""
  EXPIRED
  """Pending subscription"""
  PENDING
  """Trial subscription"""
  TRIAL
}

input SubscriptionTenantUpdateAttributes {
  tenantCode: String
  tenantId: ID
}

"""Autogenerated return type of SubscriptionTenantUpdate."""
type SubscriptionTenantUpdatePayload {
  errors: [String!]
  subscription: Subscription!
}

"""
Detail of how is the price calculated by tiers for a tiered subscription charge.
"""
type SubscriptionTieredPrice {
  amount: Float!
  quantity: Int!
  tier: SubscriptionPriceTier!
}

"""Autogenerated return type of SubscriptionTrialConvert."""
type SubscriptionTrialConvertPayload {
  errors: [String!]
  invoice: Invoice
  subscription: Subscription
}

"""Autogenerated return type of SubscriptionTrialConvertPreview."""
type SubscriptionTrialConvertPreviewPayload {
  errors: [String!]
  invoice: Invoice
  subscription: Subscription
}

"""Autogenerated return type of SubscriptionTrialExtend."""
type SubscriptionTrialExtendPayload {
  errors: [String!]
  invoice: Invoice
  subscription: Subscription
}

"""Autogenerated return type of SubscriptionUpdate."""
type SubscriptionUpdatePayload {
  errors: [String!]
  subscription: Subscription
}

enum TaxType {
  """EIN number"""
  EIN
  """General tax number"""
  GENERIC
  """GST number"""
  GST
  """VAT number"""
  VAT
}

type TaxationEntityUseCode {
  code: String!
  description: String
  name: String
  validCountries: [String!]
}

type Template {
  body: String!
  createdAt: ISO8601DateTime!
  fields: [String!]!
  id: ID!
  name: ID!
  subject: String!
  title: String
  updatedAt: ISO8601DateTime
}

input TemplateAttributes {
  body: String
  id: ID
  name: String
  subject: String
  title: String
}

"""The connection type for Template."""
type TemplateConnection {
  """A list of edges."""
  edges: [TemplateEdge]
  """A list of nodes."""
  nodes: [Template]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type TemplateEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Template
}

"""Autogenerated return type of TemplateUpdate."""
type TemplateUpdatePayload {
  errors: [String!]
  template: Template
}

type Tenant {
  account: Account!
  accountId: ID!
  code: String
  createdAt: ISO8601DateTime!
  id: ID!
  lastLogin: ISO8601DateTime
  latestProvisioningChange: TenantProvisioningChange
  latestProvisioningChangeId: ID
  name: String!
  platform: Platform!
  platformId: ID!
  provisioningChanges: [TenantProvisioningChange!]
  provisioningRequired: Boolean
  provisioningState: String
  subdomain: String
  updatedAt: ISO8601DateTime!
  userCount: Int
  utilizationMetrics: JSON
}

input TenantAttributes {
  accountId: ID
  code: String
  name: String
  platformCode: String
  platformId: ID
  subdomain: String
}

"""The connection type for Tenant."""
type TenantConnection {
  """A list of edges."""
  edges: [TenantEdge]
  """A list of nodes."""
  nodes: [Tenant]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of TenantCreate."""
type TenantCreatePayload {
  errors: [String!]
  tenant: Tenant
}

"""Autogenerated return type of TenantDelete."""
type TenantDeletePayload {
  errors: String
  tenant: Tenant
}

"""An edge in a connection."""
type TenantEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Tenant
}

input TenantMetricsAttributes {
  lastLogin: ISO8601DateTime
  userCount: Int
  utilizationMetrics: JSON
}

"""Autogenerated return type of TenantMetricsUpdate."""
type TenantMetricsUpdatePayload {
  errors: [String!]
}

type TenantProvisioningChange {
  change: JSON
  createdAt: ISO8601DateTime
  features: String
  featuresJson: JSON
  id: ID!
  state: TenantProvisioningState!
  tenant: Tenant
  updatedAt: ISO8601DateTime
}

input TenantProvisioningChangeAttributes {
  state: TenantProvisioningState
}

"""The connection type for TenantProvisioningChange."""
type TenantProvisioningChangeConnection {
  """A list of edges."""
  edges: [TenantProvisioningChangeEdge]
  """A list of nodes."""
  nodes: [TenantProvisioningChange]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type TenantProvisioningChangeEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: TenantProvisioningChange
}

"""Autogenerated return type of TenantProvisioningChangeUpdate."""
type TenantProvisioningChangeUpdatePayload {
  errors: [String!]
  tenantProvisioningChange: TenantProvisioningChange
}

enum TenantProvisioningState {
  """Tenant provisioning completed"""
  COMPLETED
  """Tenant provisioning failed"""
  FAILED
  """
  Changes have been made to the subscription that have not been applied yet
  """
  PENDING
  """Use this state to trigger a provisioning workflow"""
  STARTED
}

"""Autogenerated return type of TenantUpdate."""
type TenantUpdatePayload {
  errors: [String!]
  tenant: Tenant
}

type TieredAmount {
  """
  Total amount to pay for the period duration. Usage-based amounts could be null for future dates
  """
  amount: Float
  """Unique identifier"""
  id: ID
  """Quantity on this tier"""
  quantity: Int
  """Tier"""
  tier: QuotePriceTier
}

type Transaction {
  account: Account
  accountId: ID
  amount: Float!
  createdAt: ISO8601DateTime!
  currencyId: ID
  description: String!
  id: ID!
  invoice: Invoice
  kind: TransactionKind!
  payment: Payment
  state: String!
  transactionable: TransactionableUnion
  transactionableId: ID
}

"""The connection type for Transaction."""
type TransactionConnection {
  """A list of edges."""
  edges: [TransactionEdge]
  """A list of nodes."""
  nodes: [Transaction]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type TransactionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Transaction
}

enum TransactionKind {
  """Credit_note transaction"""
  CREDIT_NOTE
  """Invoice transaction"""
  INVOICE
  """Payment transaction"""
  PAYMENT
}

"""Transactionable Object"""
union TransactionableUnion = CreditNote | Invoice | Payment

enum TrialExpirationAction {
  """Activate subscription after trial expires"""
  ACTIVATE
  """Cancel subscription after trial expires"""
  CANCEL
}

enum UsageCalculation {
  """
  The billing process will take the quantity of the last usage entry for the billing period.
  """
  LAST
  """
  The billing process will take the maximum quantity across all records in the billing period.
  """
  MAX
  """
  The billing process will take the sum of quantity across all records in the billing period.
  """
  SUM
}

type UsageSubscriptionCharge {
  id: ID!
  name: String!
}

"""The connection type for UsageSubscriptionCharge."""
type UsageSubscriptionChargeConnection {
  """A list of edges."""
  edges: [UsageSubscriptionChargeEdge]
  """A list of nodes."""
  nodes: [UsageSubscriptionCharge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type UsageSubscriptionChargeEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: UsageSubscriptionCharge
}

type User {
  allowLoginViaEmailLink: Boolean
  createdAt: ISO8601DateTime!
  email: String
  enabled: Boolean
  entityId: ID
  firstName: String!
  fullName: String!
  groupId: ID
  id: ID!
  imageUrl: String!
  lastLogin: ISO8601DateTime
  lastName: String
  managerUser: User
  managerUserId: ID
  profile: UserProfile
  role: Role
  roleId: ID
  subordinates: [User!]
  """The user's work title"""
  title: String
  updatedAt: ISO8601DateTime!
  uuid: String
}

input UserAttributes {
  allowLoginViaEmailLink: Boolean
  email: String
  enabled: Boolean
  entityId: ID
  firstName: String
  groupId: ID
  lastName: String
  managerUserId: ID
  phone: String
  profile: UserProfileAttributes
  roleId: ID
  sendLoginLink: Boolean
  timezone: String
  title: String
  uuid: ID
}

"""The connection type for User."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """A list of nodes."""
  nodes: [User]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of UserCreate."""
type UserCreatePayload {
  errors: [String!]
  user: User
}

"""Autogenerated return type of UserDelete."""
type UserDeletePayload {
  errors: String
  user: User
}

"""An edge in a connection."""
type UserEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: User
}

type UserProfile {
  phone: String
  tabnameIsSubdomain: Boolean
  timezone: String
  title: String
}

input UserProfileAttributes {
  phone: String
  tabnameIsSubdomain: Boolean
  timezone: String
  title: String
}

"""Autogenerated return type of UserUpdate."""
type UserUpdatePayload {
  errors: [String!]
  user: User
}

"""Defines table views with conditions and column configurations"""
type View {
  """Comma-separated list of column names"""
  columns: String
  """YAML-formatted conditions"""
  conditions: String
  fields: [Field!]
  """Unique identifier for the view"""
  id: ID
  """True if this view is to be shown by default on the page"""
  isDefault: Boolean
  """If true, only the user who created the view can see it"""
  isPrivate: Boolean
  """Name of the view"""
  name: String
  """Object this view is operating on"""
  obj: String
  """Field the table is sorted by"""
  sortBy: String
  """Sort order of the table"""
  sortOrder: String
  """ID of the user who created the view"""
  userId: ID
}

"""Attributes for creating and updating a view"""
input ViewAttributes {
  """Comma-separated list of columns names"""
  columns: String
  """YAML-formatted conditions"""
  conditions: String
  """True if this view is to be shown by default on the page"""
  isDefault: Boolean
  """Name of the view"""
  name: String
  """The object this view operates on"""
  obj: String
  """Field the table is sorted by"""
  sortBy: String
  """Sort order of the table"""
  sortOrder: String
}

"""The connection type for View."""
type ViewConnection {
  """A list of edges."""
  edges: [ViewEdge]
  """A list of nodes."""
  nodes: [View]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of ViewCreate."""
type ViewCreatePayload {
  errors: [String!]
  view: View
}

"""Autogenerated return type of ViewDelete."""
type ViewDeletePayload {
  errors: String
  view: View
}

"""An edge in a connection."""
type ViewEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: View
}

"""Autogenerated return type of ViewUpdate."""
type ViewUpdatePayload {
  errors: [String!]
  view: View
}

type Warren {
  featureFlags: [FeatureFlag!]
  id: ID!
  name: String
  subdomain: String
}

input WarrenAttributes {
  email: String
  featureFlags: [FeatureFlagAttributes!]
  firstName: String
  lastName: String
  name: String
  subdomain: String
}

"""Autogenerated return type of WarrenProvision."""
type WarrenProvisionPayload {
  errors: [String!]
  warren: Warren
}

input WebPushAttributes {
  endpoint: String!
  expirationTime: Int
  keys: WebPushKeysAttributes!
}

input WebPushKeysAttributes {
  auth: String!
  p256dh: String!
}

"""Autogenerated return type of WebPushSubscribe."""
type WebPushSubscribePayload {
  errors: [String!]!
  registration: NotificationRegistration!
}

"""A webhook payload"""
type WebhookEvent {
  """Datetime the contact was created"""
  createdAt: ISO8601DateTime!
  """The headers sent with the webhook"""
  headers: String
  """Unique identifier for the webhook event"""
  id: ID!
  """Webhook payload that will be sent"""
  payload: String
  """Indicates if it was a default or custom payload"""
  payloadType: String
  """The response body received after sending the webhook"""
  responseBody: String
  """The HTTP response code received after sending the webhook"""
  responseCode: String
  """Datetime the contact was last updated"""
  updatedAt: ISO8601DateTime
  """Destination url for webhook"""
  url: String
}

"""The connection type for WebhookEvent."""
type WebhookEventConnection {
  """A list of edges."""
  edges: [WebhookEventEdge]
  """A list of nodes."""
  nodes: [WebhookEvent]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type WebhookEventEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: WebhookEvent
}

"""Autogenerated return type of WebhookEventRetry."""
type WebhookEventRetryPayload {
  errors: [String!]
  webhookEvent: WebhookEvent
}

"""Autogenerated return type of WidgetTokenCreate."""
type WidgetTokenCreatePayload {
  errors: [String!]
  host: String!
  token: String
}

"""A workflow containing triggers and jobs"""
type Workflow {
  """Description of the workflow"""
  description: String
  """Determines whether this workflow runs or not"""
  enabled: Boolean
  format: String
  """Unique identifier for the workflow"""
  id: ID!
  """User who this workflow is isolated to"""
  isolateTo: User
  """ID of the user who this workflow is isolated to"""
  isolateToUserId: ID
  """Whether this workflow is kept updated by Bunny or not"""
  keepUpdated: Boolean!
  """Name of the workflow"""
  name: String
  """The workflow recipe"""
  recipe: String
  """Whether this workflow is standard or not"""
  standard: Boolean!
  """Target class"""
  targetClass: String
  """ID of the workflow category"""
  workflowCategoryId: ID!
  """Workflow schedule"""
  workflowSchedule: String
}

"""A workflow action definition"""
type WorkflowAction {
  """Unique name of the workflow action definition"""
  name: String!
}

input WorkflowAttributes {
  description: String
  enabled: Boolean
  format: String
  isolateToUserId: ID
  keepUpdated: Boolean
  name: String
  recipe: String
  workflowCategoryId: ID
}

"""A category of workflows"""
type WorkflowCategory {
  """Unique identifier for the workflow category"""
  id: ID!
  """Name of the workflow"""
  name: String
  """Workflows in the category"""
  workflows: [Workflow!]
}

input WorkflowCategoryAttributes {
  name: String
}

"""The connection type for WorkflowCategory."""
type WorkflowCategoryConnection {
  """A list of edges."""
  edges: [WorkflowCategoryEdge]
  """A list of nodes."""
  nodes: [WorkflowCategory]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of WorkflowCategoryCreate."""
type WorkflowCategoryCreatePayload {
  errors: [String!]
  workflowCategory: WorkflowCategory
}

"""Autogenerated return type of WorkflowCategoryDelete."""
type WorkflowCategoryDeletePayload {
  errors: String
  workflowCategory: WorkflowCategory
}

"""An edge in a connection."""
type WorkflowCategoryEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: WorkflowCategory
}

"""Autogenerated return type of WorkflowCategoryUpdate."""
type WorkflowCategoryUpdatePayload {
  errors: [String!]
  workflowCategory: WorkflowCategory
}

"""The connection type for Workflow."""
type WorkflowConnection {
  """A list of edges."""
  edges: [WorkflowEdge]
  """A list of nodes."""
  nodes: [Workflow]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Autogenerated return type of WorkflowCreate."""
type WorkflowCreatePayload {
  errors: [String!]
  workflow: Workflow
}

"""Autogenerated return type of WorkflowDelete."""
type WorkflowDeletePayload {
  errors: [String!]
  workflow: Workflow
}

"""Autogenerated return type of WorkflowDuplicate."""
type WorkflowDuplicatePayload {
  errors: [String!]!
  workflow: Workflow
}

"""An edge in a connection."""
type WorkflowEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Workflow
}

"""A workflow job log entry"""
type WorkflowJobLog {
  amountFailed: Int
  amountProcessed: Int
  amountTotal: Int
  batchId: String
  """Datetime the lead was last updated"""
  completedAt: ISO8601DateTime
  """Datetime the lead was created"""
  createdAt: ISO8601DateTime!
  """Unique identifier for the workflow log entry"""
  id: ID!
  status: WorkflowJobLogStatus
  """Datetime the lead was last updated"""
  updatedAt: ISO8601DateTime!
  warrenId: ID
  workflowId: ID
}

"""The connection type for WorkflowJobLog."""
type WorkflowJobLogConnection {
  """A list of edges."""
  edges: [WorkflowJobLogEdge]
  """A list of nodes."""
  nodes: [WorkflowJobLog]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type WorkflowJobLogEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: WorkflowJobLog
}

enum WorkflowJobLogStatus {
  """Completed"""
  COMPLETED
  """Initializing"""
  INITIALIZING
  """Running"""
  RUNNING
  """Skipped"""
  SKIPPED
}

"""Autogenerated return type of WorkflowUpdate."""
type WorkflowUpdatePayload {
  errors: [String!]
  workflow: Workflow
}

"""Autogenerated return type of WorkflowsDefaultCreate."""
type WorkflowsDefaultCreatePayload {
  errors: [String!]
}